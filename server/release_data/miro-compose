#!/bin/bash

os=`uname`

install (){
    [ -f .env ] || {
        local db_password=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 40 ; echo)
        printf "A new master password for your MIRO Server database was generated: ${db_password}\nPlease keep this password in a safe place.\n"
        printf "GMS_MIRO_DATABASE_PWD=${db_password}\nGMS_MIRO_ENGINE_ANONYMOUS_USER=ENTER_USERNAME_HERE\nGMS_MIRO_ENGINE_ANONYMOUS_PWD=ENTER_PASSWORD_HERE\n" > .env
    }
    if ! grep -q "GMS_MIRO_ENGINE_HOST" .env; then
        read -p 'Please enter GAMS Engine host: ' ENGINE_HOST
        [ -z ${ENGINE_HOST} ] && {
            echo "Invalid GAMS Engine host!"
            exit 1
        }
        echo "GMS_MIRO_ENGINE_HOST=${ENGINE_HOST}">>.env
    fi
    if ! grep -q "GMS_MIRO_ENGINE_NS" .env; then
        read -p 'Please specify the namespace to be connected to MIRO Server: ' ENGINE_NS
        [ -z ${ENGINE_NS} ] && {
            echo "Invalid GAMS Engine namespace!"
            exit 1
        }
        echo "GMS_MIRO_ENGINE_NS=${ENGINE_NS}">>.env
    fi

    printf "You can change the GAMS Engine connection info at any time by modifying the \".env\" file.\nNote that MIRO Server must be restarted for these changes to take effect.\n"

    read -p 'Enable authentication? [Y/n]: ' ENABLE_AUTH

    case "$ENABLE_AUTH" in
        [nN][oO]|[nN])
            sed -i -E "s/authentication: .*/authentication: none/" data_raw/application.yml || {
                echo "Problems updating authentication method."
                exit 1
            }
            ;;
        *)
            sed -i -E "s/authentication: .*/authentication: webservice/" data_raw/application.yml || {
                echo "Problems updating authentication method."
                exit 1
            }
            ;;
    esac

    printf "Installing GAMS MIRO server. Please wait...\n\n\n"

    pull_images

    [ -d ./logs ] || mkdir logs
    if [ "$os" != "Darwin" ]; then
        chown -R 1000:1000 logs || {
            echo "Could not change ownership of directory \"logs\". Check your permissions."
            exit 1
        }
    fi

    [ -d ./data ] || mkdir data
    cp -a data_raw/. data/ || {
        echo "Failed to copy data files from \"data_raw\" to \"data\". Check your permissions."
        exit 1
    }
    if [ "$os" != "Darwin" ]; then
        chown -R 1000:1000 data || {
            echo "Could not change ownership of directory \"data\". Check your permissions."
            exit 1
        }
    fi

    [ -d ./models ] || mkdir models
    if [ "$os" != "Darwin" ]; then
        chown -R 1000:1000 models || {
            echo "Could not change ownership of directory \"models\". Check your permissions."
            exit 1
        }
    fi

    printf "GAMS MIRO server installed successfully!\nUse './miro-compose start' to start now.\n"
    return 0
}

build (){
    echo "Building custom MIRO Docker image"
    docker build -t hub.gams.com/gamsmiro-ui:latest -f Dockerfile-extend-miro .
}

pull_images (){
    echo "Pulling Docker images for GAMS MIRO Server"
    docker-compose -f docker-compose.yml pull || exit 1
}

start (){
    echo "Starting GAMS MIRO server"
    docker-compose -f docker-compose.yml up -d || exit 1
    echo "GAMS MIRO server started."
}

stop_proxies (){
    local orphaned_adminc=$(docker container ls -f "network=miroserver-network" -f "ancestor=hub.gams.com/gamsmiro-admin" --format "{{.ID}}")
    [ -z "${orphaned_adminc}" ] || {
        docker stop ${orphaned_adminc}
        docker rm ${orphaned_adminc}
    }
    
    local orphaned_uic=$(docker container ls -f "network=miroserver-network" -f "ancestor=hub.gams.com/gamsmiro-ui" --format "{{.ID}}")
    [ -z "${orphaned_uic}" ] || {
        docker stop ${orphaned_uic}
        docker rm ${orphaned_uic}
    }
}

stop (){
    echo "Stopping GAMS MIRO server"
    stop_proxies
    docker-compose -f docker-compose.yml down || exit 1
    echo "GAMS MIRO server stopped."
}

restart (){
    echo "Restarting GAMS MIRO server"
    export COMPOSE_IGNORE_ORPHANS=True
    docker-compose -f docker-compose.yml restart || exit 1
    echo "GAMS MIRO server restarted."
}

uninstall (){
    echo "Uninstalling GAMS MIRO server"
    read -p 'Are you sure you want to remove all data of GAMS MIRO server? This cannot be undone! (yes)' uninstall_confirm
    [ ${uninstall_confirm} != "yes" ] && {
        echo "Uninstalling GAMS MIRO Server was interrupted."
        exit 0
    }
    stop
    docker-compose -f docker-compose.yml down -v || exit 1
    rm -rf data models || {
        echo "Could not remove \"data\" and/or \"models\" directory. Check your permissions"
        exit 1
    }
    echo "GAMS MIRO server uninstalled."
}

case "$1" in
        stop)
            stop
            exit 0
            ;;

        uninstall)
            uninstall
            exit 0
            ;;

        restart)
            restart
            exit 0
            ;;

        start)
            start
            exit 0
            ;;

        install)
            install
            exit 0
          ;;

        build)
            build
            exit 0
          ;;

        pull)
            pull_images
            exit 0
            ;;

        update)
            echo "Updating GAMS MIRO Server"
            pull_images
            start
            exit 0
            ;;

        *)
            echo $"Usage: $0 install|build|start|stop|restart|pull|update|uninstall"
            exit 1
esac
