{{- /*
Copyright GAMS Development Corp. All Rights Reserved.
SPDX-License-Identifier: GPL-3.0-only
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-auth
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.global.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.global.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.names.fullname" . }}-auth
  template:
    metadata:
      labels:
        app: {{ include "common.names.fullname" . }}-auth
      {{- if .Values.auth.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.auth.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      automountServiceAccountToken: false
      {{- if .Values.global.securityContext.enabled }}
      securityContext:
        runAsUser: 1001
        runAsGroup: 0
        fsGroup: 0
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {{- end }}
{{- include "common.images.renderPullSecrets" ( dict "images" (list .Values.auth.image) "context" $) | nindent 6}}
      {{- if .Values.global.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.global.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.global.tolerations "context" $) | nindent 8 }}
      {{- end }}
      priorityClassName: {{ include "common.names.fullname" . }}-pc-sys
      containers:
      - name: auth
        image: {{ include "common.images.image" (dict "imageRoot" (dict "registry" .Values.auth.image.registry "repository" .Values.auth.image.repository "tag" (coalesce .Values.auth.image.tag .Values.image.tag .Chart.AppVersion)) "global" .Values.global) }}
        resources:
{{ toYaml .Values.auth.resources | indent 10 }}
        ports:
        - containerPort: 8081
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 15
        env:
        - name: PORT
          value: "8081"
        - name: PYTHONPYCACHEPREFIX
          value: "/tmp/pycache"
        - name: ENGINE_URL
          value: "{{ .Values.proxy.config.engine.apiUrl }}"
        - name: ENGINE_NS
          value: "{{ .Values.proxy.config.engine.namespace }}"
        - name: GMS_MIRO_DATABASE_HOST
          value: {{ include "common.names.fullname" . }}-db
        - name: GMS_MIRO_DATABASE_PORT
          value: "{{ .Values.db.port | default 5432 }}"
        - name: GMS_MIRO_DATABASE
          value: "{{ .Values.db.name }}"
        - name: GMS_MIRO_DATABASE_USER
          value: "{{ .Values.db.user }}"
        - name: SPECS_YAML_PATH
          value: "/home/miro/admin/mnt/specs.yaml"
        - name: APP_CONFIG_FILE_PATH
          value: "/home/miro/admin/application.yml"
        - name: SCRIPT_NAME
          value: "{{ .Values.global.rootPath | trimSuffix "/" }}"
        - name: GMS_MIRO_DATABASE_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "common.names.fullname" . }}-secrets
              key: db_password
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: shared-data
          mountPath: /home/miro/admin/mnt
        - name: config-volume
          mountPath: /home/miro/admin/application.yml
          subPath: application.yml
        {{- if .Values.global.securityContext.enabled }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          privileged: false
          readOnlyRootFilesystem: true
        {{- end }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: config-volume
          configMap:
            name: {{ include "common.names.fullname" . }}-proxy-cm
        {{- if eq .Values.persistence.type "local" }}
        - name: shared-data
          hostPath:
            path: {{ .Values.persistence.local.path }}
            type: DirectoryOrCreate
        {{- else if eq .Values.persistence.type "efs" }}
        - name: shared-data
          persistentVolumeClaim:
            claimName: {{ include "common.names.fullname" . }}-efs-pvc
        {{- end }}
