pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '2', daysToKeepStr: '1'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Pack') {
            steps {
                parallel linux: {
                    node('master') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            echo "Do the linux packaging stuff here."
                        '''
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            iscc "installer\\win\\setup_win.iss" /DMyAppVersion=0.2.6.1
                        '''
                        withCredentials([certificate(aliasVariable: '', credentialsId: '302df092-b329-47b9-8f7a-605da075126d', keystoreVariable: 'WIN_CERT_FILE', passwordVariable: 'WIN_CERT_PASSWD')]) {
                            bat '''
                                echo Setting up environment for VS2017 usage...
                                cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                                call vcvars64.bat
                                cd %WORKSPACE%\\installer\\win\\Output
                                for /f "tokens=*" %%i in ('dir /B ^| findstr /I GAMS_WebUI-.*') do set INSTFILE=%%i
                                signtool sign /v /f %WIN_CERT_FILE% /p %WIN_CERT_PASSWD% /tr http://timestamp.comodoca.com/rfc3161 %INSTFILE%
                            '''
                        }
                        archiveArtifacts artifacts: '**/GAMS_WebUI-*.exe', fingerprint: true
                    }
                },
                macos: {
                    node('macos') {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            cd installer/macOS
                            gzip -d GAMSWebUI.dmg.gz && mv GAMSWebUI.dmg GAMS_WebUI.dmg
                            cd ../..

                            DMG_ROOT=volume
                            mkdir $DMG_ROOT
                            hdiutil attach -mountpoint ./$DMG_ROOT installer/macOS/GAMS_WebUI.dmg

                            TARGET=$DMG_ROOT/GAMS25.1/sysdir

                            mkdir $TARGET/GMSWebUI
                            mkdir $TARGET/inclib

                            cp -r app.R conf doc global.R JS LICENSE LICENSE_full modules R resources UI www $TARGET/GMSWebUI
                            cp model/loadCSV.gms model/webui.gms $TARGET/inclib

                            hdiutil detach $DMG_ROOT
                            mount

                            cd installer/macOS

                            # TODO (AF): The following command does not work on Jenkins.
                            # Probabaly we should update to Mojave or change the DMG fs to '-fs HFS+ -format UDRW'.
                            # If we do the latter we have of better coverage of older macOS versions.
                            #hdiutil convert -verbose -debug-format UDBZ -o GAMSWebUI-final.dmg GAMSWebUI.dmg
                        '''
                        archiveArtifacts artifacts: '**/GAMS_WebUI*.dmg', fingerprint: true
                    }
                }
            }
        }
    }
}
