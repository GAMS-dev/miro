* file to generate batch job submission script.
* Input: generated batch file
* Output: batch submission script with isolated GAMS calls

* NOTE: The script generated from this file will, if executed,
* delete all folders of the selected directory which are identical
* to the directory names of the batch file

* path to batch file 
$if not set bfdir $set bfdir "."
* path to the GAMS model and data corresponding to the batchfile
$if not set datapath $set datapath "model%system.dirsep%cases"

* name for job submission file generated by this script
$if not set fJobSubName $set fJobSubName "jobsubmission.gms"
$if not set zipname $set zipname "4upload"

$if not set outScript $set outScript "gams"

$onEmbeddedCode Python:
import os

bfdir = r"%bfdir%"
for file in os.listdir(bfdir):
    if file.endswith(".gmsb"):
        modelpath = file.replace(".gmsb", "")
        bfname = os.path.join(bfdir, file)
        break
        
datapath = r"%datapath%"
fJobSubName = r"%fJobSubName%"
outScript = "%outScript%"
zipname = "%zipname%"
fscalars = "scalars.csv"


# string manipulation (batch file)
def extractCall(call):
   call = call[66:]
   return call.strip()

def extractDir(fdir):
   fdir = fdir[:64]
   return fdir.strip()

def getScalars(text):
   try:
      if text.find('.gms ')>=0:
         text = text.split('.gms ')[1]
      textTmp = text.split()
      scalars = "Scalar,Description,Value" + r"\n"
      for i in textTmp:
         if i.startswith("--"):
            i = i[2:]
         itmp = i.split("=")
         for idx, j in enumerate(itmp):
            if j.startswith("trace"):
               break
            if idx == 0:
               scalars += j + ",,"
            else:
               scalars += j + r"\n"
      return scalars
   except:
      pass


def modelName(text):
   j=""
   try:
      if text.find('.gms ')>=0:
         text = text.split('.gms ')[0]
      textTmp = text.split()
      return textTmp[-1]
   except:
      pass
      
def trcName(text):
   j=""
   try:
      if text.find('.gms ')>=0:
         text = text.split('.gms ')[1]
      textTmp = text.split()
      for i in textTmp:
         if (i.startswith("trace")):
            tracename = i.split("=")[1]
            return tracename
   except:
      pass

def dummyTrace(text):
   trcFile=""
   try:
      trcFile += r"* Trace Record Definition\n* GamsSolve\n"
      trcFile += r"* InputFileName,ModelType,SolverName,NLP,MIP,"
      trcFile += r"JulianDate,Direction,NumberOfEquations,NumberOfVariables,"
      trcFile += r"NumberOfDiscreteVariables,NumberOfNonZeros,NumberOfNonlinearNonZeros,"
      trcFile += r"OptionFile,ModelStatus,SolverStatus,ObjectiveValue\n"
      trcFile += r"* ,ObjectiveValueEstimate,SolverTime,NumberOfIterations,"
      trcFile += r"NumberOfDomainViolations,NumberOfNodes,#User1\n*\n"
      trcFile += modelName(text) + r",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,13,13,NA,NA,NA,NA,NA,NA,#\n"
   except:
      pass
   return trcFile
   

# read batch file
with open(bfname) as f:
   content = f.readlines()
   content = [x.strip() for x in content]

if outScript == "gams":
   # write GAMS $calls into job submission file
   linestmp = ""
   linestmp += "$if dexist " + zipname + " $call rm -r " + zipname + "\n"
   linestmp += "$call mkdir " + zipname + "\n" 
   for index, item in enumerate(content):
      dirname = extractDir(item)
      tmpdir = "tmp"+str(index)
      call = extractCall(item)
      fjobsub = open(fJobSubName,"w")
      linestmp += "$call cd " + zipname + "\n$if dexist " + tmpdir + " $call rm -r " + tmpdir + "\n"
      linestmp += "$call cd " + zipname + " && mkdir " + tmpdir + "\n"
      linestmp += "$if errorlevel 1 $abort problems mkdir " + tmpdir + "\n"
      # dummy trace file (to gurantee that a trace file exists for each run)
      linestmp += "$call cd " + zipname + "/" + tmpdir + " && printf \"" + dummyTrace(item) + "\" > " + trcName(item) + "\n"
      # scalars.csv file manually filled (needed in webui for data validation)
      linestmp += "$call cd " + zipname + "/" + tmpdir + " && printf \"" + getScalars(item) + "\" > " + fscalars + "\n"
      # gams call
      linestmp += "$call cd " + zipname + "/" + tmpdir + " && " + call + " " + "--webui=1 idir = ..%system.dirsep%..%system.dirsep%model%system.dirsep% ".strip() + modelpath + " " + "idir2 = ..%system.dirsep%..%system.dirsep% ".strip() + datapath + "\n"      
      linestmp += "$call cd " + zipname + " \n$if dexist " + dirname + " $call rm -r " + dirname + "\n"
      linestmp += "$call cd " + zipname + " && " + "mv " + tmpdir + " " + dirname + "\n\n"
   
   # last line of job submission file: zip the results (exclude lst, json, gms and gdx files). Delete existing zip before
   linestmp += "$if exist " + zipname + ".zip $call rm -r " + zipname + ".zip\n" + "$call cd " + zipname + " && gmszip -r ../" + zipname + ".zip ./* -x *.lst* -x *.json* -x *.gdx* -x *.gms* -x *.txt* -x *.lxi*"

   # delete all temporary solution directories
   fjobsub.write(linestmp + "\n$call rm -r " + zipname)

elif outScript == "hpc":
   pass
else:
   pass
$offEmbeddedCode