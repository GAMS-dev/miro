* file to generate batch job submission script.
* Input: generated batch file
* Output: batch submission script with isolated GAMS calls

* NOTE: The script generated from this file will, if executed,
* delete all folders of the selected directory which are identical
* to the directory names of the batch file

$set bfname "dcopf.gmsb"

* name of batch file (generated with WebUI)
$if not set bfname $abort No batch file specified. Please set bfname
* path to batch file 
$if not set bfdir $set bfdir ".\\"
* path to the GAMS model and data corresponding to the batchfile
$if not set modelpath $set modelpath "..\dcopf"
$if not set datapath $set datapath "..\cases"

* name for job submission file generated by this script
$if not set fJobSubName $set fJobSubName "jobsubmission.gms"

$if not set outScript $set outScript "gams"

$onEmbeddedCode Python:
bfname = r"%bfname%"
bfdir = r"%bfdir%"
modelpath = r"%modelpath%"
datapath = r"%datapath%"
fJobSubName = r"%fJobSubName%"
outScript = "%outScript%"
fscalars = "scalars.csv"

# string manipulation (batch file)
def extractCall(call):
   call = call[66:]
   return call.strip()

def extractDir(fdir):
   fdir = fdir[:64]
   return fdir.strip()

def getScalars(text):
   if text.find('.gms ')>=0:
      text = text.split('.gms ')[1]
   textTmp = text.split()
   scalars = "Scalar,Description,Value" + r"\n"
   for i in textTmp:
      if i.startswith("--"):
         i = i[2:]
      itmp = i.split("=")
      for idx, j in enumerate(itmp):
         if j.startswith("trace"):
            break
         if idx == 0:
            scalars += j + ",,"
         else:
            scalars += j + r"\n"
   return scalars           
   

# read batch file
with open(bfdir + bfname) as f:
   content = f.readlines()
   content = [x.strip() for x in content]

if outScript == "gams":
   # write GAMS $calls into job submission file
   linestmp = ""
   dirtmp = ""
   for index, item in enumerate(content):
      dirname = extractDir(item)
      dirtmp += "*"+dirname+"* "
      call = extractCall(item)
      fjobsub = open(fJobSubName,"w")
      linestmp += "$call if exist " + dirname + " rm -r " + dirname + "\n"
      linestmp += "$call mkdir " + dirname + "\n"
      linestmp += "$if errorlevel 1 $abort problems mkdir " + dirname + "\n"
      linestmp += "$call cd " + dirname + " && printf \"" + getScalars(item) + "\" > " + fscalars + "\n"
      
      linestmp += "$call cd " + dirname + " && " + call + " --gmswebui=1 idir = " + modelpath + " idir2 = " + datapath + "\n"
      linestmp += "$if errorlevel 1 $abort problems running " + dirname + "\n\n"
   
   # last line of job submission file: zip the results (exclude lst, json, gms and gdx files)
   fjobsub.write(linestmp + "$call gmszip -r 4upload " + " * -i " + dirtmp +  " -x *.lst* -x *.json*")

elif outScript == "hpc":
   pass
else:
   pass
$offEmbeddedCode