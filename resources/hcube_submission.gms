* file to generate batch job submission script.
* Input: generated batch file
* Output: batch submission script with isolated GAMS calls

* NOTE: The script generated from this file will, if executed,
* delete all folders of the selected directory which are identical
* to the directory names of the batch file

* path to batch file 
$if not set bfdir $set bfdir "."

* name for job submission file generated by this script
$if not set fJobSubName $set fJobSubName "jobsubmission.gms"
$if not set zipname $set zipname "4upload"

$if not set outScript $set outScript "gams"

$if not set exec $set exec "true"
$onEmbeddedCode Python:
import os
import re
import shlex
import json

bfdir = r"%bfdir%"
job_sub_fname = r"%fJobSubName%"
out_script = "%outScript%"
zipname = "%zipname%"
bf_name = os.path.join(bfdir, "hcube.json")

if not os.path.isfile(bf_name):
   raise OSError(f'Hypercube configuration file: "{bf_name}" does not exist.')
   
with open(bf_name, 'r') as f:
   hc_content = json.load(f)
   
if ('jobs' not in hc_content or
      not isinstance(hc_content['jobs'], list) or
      'model_gms_name' not in hc_content or
      not hc_content['model_gms_name']):
   raise ValueError('Malformatted Hypercube configuration file.')
   
hc_jobs = hc_content['jobs']

model_gms_name = hc_content['model_gms_name']

use_pf_arg = ""
model_name = os.path.splitext(os.path.basename(model_gms_name))[0].lower()

if os.path.isfile(os.path.join(bfdir, model_name + ".pf")):
   use_pf_arg = " pf=" + shlex.quote(os.path.join(bfdir, model_name + ".pf"))

if out_script == "gams":
   # write GAMS $calls into job submission file
   linestmp = "$if dexist " + zipname + " $call rm -r " + zipname + "\n"
   linestmp += "$call mkdir " + zipname + "\n"
   
   for id, hc_job in enumerate(hc_jobs):
      dirname = hc_job['id']
      tmpdir = "tmp"+str(id)
      
      linestmp += "$call cd " + zipname + " && mkdir " + tmpdir + "\n"
      linestmp += "$if errorlevel 1 $abort problems mkdir " + tmpdir + "\n"
         
      # gams call
      linestmp += "$call cd " + zipname + "/" + tmpdir + " && gams " + model_gms_name + " " + " ".join(hc_job['arguments']) + use_pf_arg + "\n"      
      linestmp += "$if dexist " + dirname + " $call rm -r " + dirname + "\n"
      linestmp += "$call cd " + zipname + " && " + "mv " + tmpdir + " " + dirname + "\n\n"
      linestmp += "$onecho > \"%jobID%.log\"\n"
      linestmp += str(id + 1) + "/" + str(len(hc_jobs)) + "\n"
      linestmp += "$offecho\n"
   
   # last line of job submission file: zip the results (exclude lst, json, gms and gdx files). Delete existing zip before
   linestmp += "$if exist " + zipname + ".zip $call rm -r " + zipname + ".zip\n" + "$call cd " + zipname + " && gmszip -r ../" + zipname + ".zip ./* -i \"_miro_gdxin_.gdx\" \"_miro_gdxout_.gdx\" \"_sys_trace_" + model_name + ".trc\""

   # delete all temporary solution directories
   linestmp += "\n$call rm -r " + zipname

   #write to file
   with open(job_sub_fname,"w") as fjobsub:
      fjobsub.write(linestmp)

else:
   raise ValueError('out_script option not implemented.')
$offEmbeddedCode