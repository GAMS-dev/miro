; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define UnInstInfo="{app}\.uninstinfo.ini"

[Setup]
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
;AppName=GAMS MIRO {#MIROVersion} BETA
AppName=GAMS
AppVerName=GAMS win{code:BitnessToStr} {#MIROVersion}
AppPublisher=GAMS Development
AppSupportURL=http://www.gams.com
AppPublisherURL=http://www.gams.com
AppUpdatesURL=http://www.gams.com
DefaultDirName={code:GetDefaultDir}
;DefaultDirName={pf}\GAMS{#MyDirVersion}
DefaultGroupName={code:GetDefaultGroup}
PrivilegesRequired=none
OutputBaseFilename=GAMS_MIRO-{#MIROVersion}

UsePreviousLanguage=no

;SourceDir=c:\program files\gamstest
SolidCompression=true
Compression=lzma/ultra
;Compression=none
ShowLanguageDialog=auto
AppID={code:GetAppID}
ChangesAssociations=true
ShowTasksTreeLines=true
AppVersion=GAMS MIRO {#MIROVersion} BETA
AppMutex=PREVINST:gamside
AllowRootDirectory=true
UsePreviousAppDir=false
InternalCompressLevel=ultra
VersionInfoCompany=GAMS Development Corporation
VersionInfoTextVersion={#MIROVersion}
VersionInfoVersion=0.4
VersionInfoDescription=GAMS MIRO {#MIROVersion} BETA installer
AlwaysUsePersonalGroup=no
DiskSpanning=false
OutputDir=output
SetupIconFile=setup.ico

WizardSmallImageFile=gams_small.bmp
WizardImageFile=gams_left.bmp

DisableWelcomePage=no
DisableDirPage=no
DisableProgramGroupPage=no

[Tasks]
; NOTE: The following entry contains English phrases ("Create a desktop icon" and "Additional icons"). You are free to translate them into another language if required.
;Name: desktopicon; Description: Create a &desktop icon; GroupDescription: Additional icons:


[Files]
Source: miro_lang\en\config_schema.json; DestDir: {app}\miro\conf; Flags: ignoreversion; Check: InstallEnglishMIRO;
Source: miro_lang\de\config_schema.json; DestDir: {app}\miro\conf; Flags: ignoreversion; Check: InstallGermanMIRO;
Source: miro_lang\cn\config_schema.json; DestDir: {app}\miro\conf; Flags: ignoreversion; Check: InstallChineseMIRO;
Source: innofiles\*.*; DestDir: {app}; Flags: ignoreversion recursesubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[INI]
Filename: {app}\gamside.url; Section: InternetShortcut; Key: URL; String: http://www.gams.com

[Icons]
Name: {group}\GAMS Studio; Filename: {app}\studio\studio.exe
Name: {group}\gamside; Filename: {app}\gamside.exe
; NOTE: The following entry contains an English phrase ("on the Web"). You are free to translate it into another language if required.
Name: {group}\GAMS on the Web; Filename: {app}\gamside.url
; NOTE: The following entry contains an English phrase ("Uninstall"). You are free to translate it into another language if required.
Name: {group}\Uninstall GAMS; Filename: {uninstallexe}
;Name: {userdesktop}\GAMS {#MyDirVersion}; Filename: {app}\gamside.exe; Tasks: desktopicon

[Run]
; NOTE: The following entry contains an English phrase ("Launch"). You are free to translate it into another language if required.
Filename: {app}\gamside.exe; Description: Launch GAMS IDE; Flags: nowait postinstall skipifsilent; Check: ShouldRunIDE
Filename: {app}\studio\studio.exe; Description: Launch GAMS Studio; Flags: nowait postinstall skipifsilent; Check: ShouldRunStudio
Filename: {app}\docs\RN_MAIN.html; Description: Show release notes; Flags: shellexec nowait postinstall skipifsilent unchecked

[UninstallDelete]
Type: files; Name: {app}\gamside.url
Type: files; Name: {app}\.reginfo.dat

[Components]

[_ISTool]
UseAbsolutePaths=false
[Code]

// load windows dll function to use the clipboard
function OpenClipboard(hWnd: Integer): Boolean;
external 'OpenClipboard@user32.dll stdcall';
function CloseClipboard(): Boolean;
external 'CloseClipboard@user32.dll stdcall';
function GetClipboardData(uFormat: Integer): Integer;
external 'GetClipboardData@user32.dll stdcall';
function IsClipboardFormatAvailable(uFormat: Integer): Boolean;
external 'IsClipboardFormatAvailable@user32.dll stdcall';
function GlobalLock(handle: Integer): PChar;
external 'GlobalLock@kernel32.dll stdcall';
function GlobalUnlock(handle: Integer): Integer;
external 'GlobalUnlock@kernel32.dll stdcall';
function GlobalSize(handle: Integer): DWord;
external 'GlobalSize@kernel32.dll stdcall';

{global variables}
var
   CB_AllUsers, CB_Path, CB_Shortcut, CB_Shortcut_Studio: TNewCheckBox;
   CB_Advanced: TNewCheckBox;
   LicenseStr: String;
   wpAdvancedOptions: Integer;
   wpMIROLang: Integer;
   IsAdmin: Boolean;
   CLB_License, CLB_MIROLang: TNewCheckListBox;
   ST_License: TNewStaticText;
   CLB_License_Last_Checked: Integer;
 

procedure DefaultProject;
var
   FileGamsExe: string;
   FileGamsIni: string;                    
   FileProj   : string;
   DirProj    : string;
   OldIni     : string;
begin
   FileGamsExe := ExpandConstant('{app}\gams.exe');
   DirProj := ExpandConstant('{userdocs}');
   if DirProj = ''                                  
   then
      DirProj := 'c:';
   DirProj := DirProj + '\gamsdir';
   ForceDirectories(DirProj);
   FileGamsIni := DirProj + '\gamside.ini';
   OldIni := ExpandConstant('{win}\gamside.ini');
   FileCopy(OldIni, FileGamsIni, true);  //will not overwrite existing file
   SetIniString('EXECUTE', 'EXECUTABLE', FileGamsExe, FileGamsIni);
   SetIniString('EXECUTE', 'USOLVER','1',FileGamsIni);
   FileProj := GetIniString('PROJECT', 'ACTIVE', '', FileGamsIni);
//   MsgBox('FileProj = ' + FileProj, mbConfirmation, MB_OK);
   if not FileExists(FileProj)
   then
      begin
//      MsgBox('Creating default project', mbConfirmation, MB_OK);
      FileProj := DirProj + '\project.gpr';
      CreateDir(DirProj);
      SetIniString('PROJECT', 'ACTIVE', FileProj, FileGamsIni);
      SaveStringToFile(FileProj,'[Project]', false);
      end;
end;

function InstallEnglishMIRO: Boolean;
begin
  Result := CLB_MIROLang.Checked[1]
end;

function InstallGermanMIRO: Boolean;
begin
  Result := CLB_MIROLang.Checked[2]
end;

function InstallChineseMIRO: Boolean;
begin
  Result := CLB_MIROLang.Checked[3]
end;

function ShouldRunStudio: Boolean;
begin
  Result := True;
end;

function ShouldRunIDE: Boolean;
begin
  Result := False;
end;

{Copy a license file}
function CopyLicenseFile(): Boolean;
var
  Success: Boolean;
  LicenseFile: string;
begin
  Success := GetOpenFileName('Copy license file', LicenseFile, ExpandConstant('{userdesktop}'),
                'license file|*.txt', '*.txt')
  if Success then 
  begin
    if LowerCase(LicenseFile) = LowerCase(ExpandConstant('{app}\gamslice.txt')) then Success := True
    else Success := FileCopy(LicenseFile, ExpandConstant('{app}\gamslice.txt'), false);
    if Success then MsgBox('License file copied to GAMS system directory',mbInformation, MB_OK)
    else MsgBox('License file could not be copied', mbInformation, MB_OK);
  end;
  Result := Success; 
end;

{Write license file from string}
function WriteLicenseFile(): Boolean;
var
  Success: Boolean;
begin
  Success := SaveStringToFile(ExpandConstant('{app}\gamslice.txt'), LicenseStr, False);
  if not WizardSilent then
  begin
    if Success then MsgBox('License written to gamslice.txt in GAMS system directory',mbInformation, MB_OK)
    else MsgBox('Could not write license to file', mbInformation, MB_OK);
  end;
  Result := Success; 
end;

{Get a default directory for installation depending on the bitness}
function GetDefaultDir(Param: String): String;
begin      
  if Is64BitInstallMode then
    Result := ExpandConstant('C:\GAMS\win64\{#MyDirVersion}')
  else
    Result := ExpandConstant('C:\GAMS\win32\{#MyDirVersion}');
end;

{Get a string representing the installation bitness (32/64)}
function BitnessToStr(Param: String): String;
begin
  if Is64BitInstallMode then
    Result := '64'
  else
    Result := '32';
end;

{Get a default group for installation depending on the bitness}
function GetDefaultGroup(Param: String): String;
var
  Version: TWindowsVersion;
begin
  GetWindowsVersionEx(Version);
  {For Windows 10 and Windows Server 2016 and higher change the structure of start menu entries since nesting seems not to be allowed anymore}
  if Version.Major >= 10
  then
    begin
      if Is64BitInstallMode then
        Result := ExpandConstant('GAMS {#MyDirVersion} (64 bit)')
      else
        Result := ExpandConstant('GAMS {#MyDirVersion} (32 bit)');
    end
  else
    begin
      if Is64BitInstallMode then
        Result := ExpandConstant('GAMS\win64\{#MyDirVersion}')
      else
        Result := ExpandConstant('GAMS\win32\{#MyDirVersion}');
    end;
end;

{Get default app id depending on the bitness}
function GetAppID(Param: String): String;
begin
  if Is64BitInstallMode then
    Result := ExpandConstant('GAMS win64 {#MyDirVersion}')
  else
    Result := ExpandConstant('GAMS win32 {#MyDirVersion}');
end;

{Check the clipboard for a license string and on success ask the user
if he wants to use this license}
procedure CheckCB(Sender: TObject);
var
   ps1: PChar;
   ps2: String;
   dwLen : DWord;
   hWnd: Integer;
   dataHandle : THandle;
   License: string;
   S : string;
   S2: string;
   K : integer;
   L : integer;
   G : boolean;

begin
{check only if the last license option was selected or if the Sender is nil(=we move to the finished page the first time)}
if (CLB_License.Checked[3]) or (Sender = nil) then
begin
{reset some states}
LicenseStr := '';
ST_License.Caption := 'clipboard has no GAMS license';
ST_License.Font.Height := ScaleX(16);
CLB_License.Checked[CLB_License_Last_Checked] := True;

// load text from clipboard
hWnd := StrToInt(ExpandConstant('{wizardhwnd}')); 
// 1 = text = CF_TEXT
if IsClipboardFormatAvailable(1) and OpenClipboard(hWnd) then
begin
 //MsgBox('1', mbInformation, MB_OK)
  dataHandle := GetClipboardData(1);
  //MsgBox('2', mbInformation, MB_OK)
  ps1 := GlobalLock(dataHandle);
  dwLen := GlobalSize(dataHandle);
  ps2 := Copy(ps1, 0, dwLen-1);      
  GlobalUnlock(dataHandle);
  CloseClipboard();


License := Trim(ps2);
S2 := Copy(License, 62, 4);
if ((S2 = '-WIN') or (S2 = '-GEN') or (S2 = '-ALL') or (S2 = '-LNX') or (S2 = '-DAR')) and ((License[55] = ':') or (License[55] = '/'))
then
  begin
  S2 := Copy(License, 269, 2);
  if S2 = 'DC'
  then
    S := License;                     
    begin
    G := true;
    for L := 1 to 6
    do begin
      if S = ''
      then
        begin
        if L < 6
        then
          G := false
        break;
        end;
      K := Pos(#13 + #10, S);
      if k = 0
      then
        begin
        s2 := S;
        S := '';
        end
      else
        begin
        S2 := Copy(S, 1, k - 1);
        Delete(S, 1, k + 1);
        end;
      if Length(s2) <> 65
      then
        G := false
      end;
      Delete(S, 1, 100);
      if G
      then 
      begin
        LicenseStr := License;
        ST_License.Caption := LicenseStr;
        ST_License.Font.Height :=  ScaleX(10);
        CLB_License.Checked[3] := True;   
      end;
    end;
  end;
        
end;
end;
CLB_License.Refresh;
end;

{Write registry depending on the AllUsers parameter and write to .uninstinfo.ini file}
procedure WriteReg(AllUsers: Boolean);
var
    Hive: Integer;
    HiveStr, SubKey, Data: String;
    Success: Boolean;
begin
Hive := HKCU;
HiveStr := 'HKCU';
if AllUsers then
begin
   Hive := HKCR;
   HiveStr := 'HKCR';
end;

//Clear HKCU first
//This is required, when we write to HKCR and there is still an entry in HKCU.
RegDeleteKeyIncludingSubkeys(HKCU, '.gms');
RegDeleteKeyIncludingSubkeys(HKCU, 'gamside.file');
RegDeleteKeyIncludingSubkeys(HKCU, 'gamside.file\Shell\Open\Command');
RegDeleteKeyIncludingSubkeys(HKCU, '.gpr');
RegDeleteKeyIncludingSubkeys(HKCU, 'gamside.project');
RegDeleteKeyIncludingSubkeys(HKCU, 'gamside.project\Shell\Open\Command');
RegDeleteKeyIncludingSubkeys(HKCU, 'gams.location');


//first line in file is the Hive type
SetIniString('registry', 'hive', HiveStr, ExpandConstant('{#UnInstInfo}'))
//SaveStringToFile(ExpandConstant('{app}\.reginfo.dat'),  HiveStr + #13#10, False)

//Root: HKLM; SubKey: .gms; ValueType: string; ValueData: gamside.file; Flags: uninsdeletekey
SubKey := '.gms' Data := 'gamside.file';
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key1', SubKey, ExpandConstant('{#UnInstInfo}')) //SaveStringToFile(ExpandConstant('{app}\.reginfo.dat'),  SubKey + #13#10, True)

//Root: HKLM; SubKey: gamside.file; ValueType: string; ValueData: GAMS IDE file; Flags: uninsdeletekey
SubKey := 'gamside.file' Data := 'GAMS IDE file';
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key2', SubKey, ExpandConstant('{#UnInstInfo}')) 

//Root: HKLM; SubKey: gamside.file\Shell\Open\Command; ValueType: string; ValueData: """{app}\gamside.exe"" ""%1"""; Flags: uninsdeletevalue createvalueifdoesntexist
if False then Data := ExpandConstant('"{app}\gamside.exe" "%1"')
else Data := ExpandConstant('"{app}\studio\studio.exe" "%1"');
SubKey := 'gamside.file\Shell\Open\Command';
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key3', SubKey, ExpandConstant('{#UnInstInfo}')) 

//Root: HKLM; Subkey: .gpr; ValueType: string; ValueData: gamside.project; Flags: uninsdeletekey
SubKey := '.gpr' Data := 'gamside.project';
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key4', SubKey, ExpandConstant('{#UnInstInfo}')) 

//Root: HKLM; SubKey: gamside.project; ValueType: string; ValueData: GAMS IDE project; Flags: uninsdeletekey
SubKey := 'gamside.project' Data := 'GAMS IDE project';
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key5', SubKey, ExpandConstant('{#UnInstInfo}')) 

//Root: HKLM; SubKey: gamside.project\Shell\Open\Command; ValueType: string; ValueData: """{app}\gamside.exe"" ""%1"""; Flags: uninsdeletevalue createvalueifdoesntexist
SubKey := 'gamside.project\Shell\Open\Command' Data := ExpandConstant('"{app}\gamside.exe" "%1"');
Success := RegWriteStringValue(Hive, SubKey, '', Data);
if Success then SetIniString('registry', 'key6', SubKey, ExpandConstant('{#UnInstInfo}')) 

//Root: HKLM; SubKey: gamside.project; ValueType: string; ValueData: GAMS IDE project; Flags: uninsdeletekey
SubKey := 'gams.location' Data := 'GAMS Location';
Success := RegWriteStringValue(Hive, SubKey, '', ExpandConstant('{app}'));
if Success then
begin
SetIniString('registry', 'key7', SubKey, ExpandConstant('{#UnInstInfo}'))
end;

end;

{Creates a shortcut and write this to .uninstinfo.ini}
procedure CreateShortcut;
var
   Link: string;
begin
Link := ExpandConstant('{userdesktop}\GAMS win') + BitnessToStr('') + ExpandConstant(' {#MIROVersion}.lnk');
CreateShellLink(Link, '',
                ExpandConstant('{app}\gamside.exe'), '', '', ExpandConstant('{app}\gamside.exe'), 0, SW_SHOWNORMAL);
SetIniString('file', 'shortcut', Link, ExpandConstant('{#UnInstInfo}'));
end;

{Creates a shortcut for GAMS Studio and write this to .uninstinfo.ini}
procedure CreateShortcutStudio;
var
   Link: string;
begin
Link := ExpandConstant('{userdesktop}\GAMS Studio win') + BitnessToStr('') + ExpandConstant(' {#MIROVersion}.lnk');
CreateShellLink(Link, '',
                ExpandConstant('{app}\studio\studio.exe'), '', '', ExpandConstant('{app}\studio\studio.exe'), 0, SW_SHOWNORMAL);
SetIniString('file', 'shortcut_studio', Link, ExpandConstant('{#UnInstInfo}'));
end;

{Update the PATH variable and a GAMSDIR variable depending on the AllUser parameter.}
procedure UpdatePath(AllUsers: boolean);
var
    Hive: Integer;
    SubKey, PathStr: String;
begin
   Hive := HKCU
   SubKey := 'Environment'
   if AllUsers then
   begin
      Hive := HKLM
      SubKey := 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'
   end;
   RegWriteStringValue(Hive, SubKey, 'GAMSDIR', ExpandConstant('{app}') + ';' + ExpandConstant('{app}\gbin'));
   if not RegQueryStringValue(Hive, SubKey, 'Path', PathStr) then    RegWriteExpandStringValue(Hive, SubKey, 'Path', '%GAMSDIR%;')
   else if Pos('%GAMSDIR%', PathStr) = 0 then RegWriteStringValue(Hive, SubKey, 'Path', '%GAMSDIR%;' + PathStr)
   
   // show a warning, that the System GAMSDIR will have a higher precedence
   if not AllUsers and RegValueExists(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'GAMSDIR')
   then MsgBox('A GAMSDIR system environment variable is present from a previous installation. When using the PATH variable, system GAMSDIR will take precedence over user GAMSDIR.', mbInformation, MB_OK)
end;

{Modify the welcome page by adding a checkbox for an advanced installation mode}
procedure ModifyWelcomePage();
var     
  Page: TWizardPage;
begin
  Page := PageFromID(wpWelcome);

  CB_Advanced := TNewCheckBox.Create(Page);
  CB_Advanced.Caption := 'Use advanced installation mode'
  CB_Advanced.Width := Page.SurfaceWidth - 100;
  CB_Advanced.Color := clWindow;
  CB_Advanced.ParentBackground := False;
  CB_Advanced.Parent := Page.Surface;
  CB_Advanced.ParentColor := True;
  CB_Advanced.Top := ScaleY(200);
  CB_Advanced.Left := Page.Surface.Width - ScaleX(322);
  CB_Advanced.Height := ScaleY(200);
  CB_Advanced.Width := ScaleX(200);

end;

procedure SaveState(Sender: TObject);
var
  i: Integer;
begin
  for i:=1 to 3 do
  begin
    if CLB_License.Checked[i] then CLB_License_Last_Checked := i;
  end;
end;

{Modify the finished page by adding button for license copy}
procedure ModifyFinishedPage();
var
  Page: TWizardPage;
begin
  Page := PageFromID(wpFinished);
  CLB_License := TNewCheckListBox.Create(Page);

  CLB_License.Flat := True;
  CLB_License.BorderStyle := bsNone;
  CLB_License.ParentColor := True;
  CLB_License.Parent := Page.Surface;
  CLB_License.Width := ScaleX(300);
  CLB_License.Height := ScaleX(70);
  
  CLB_License.Top := Page.Surface.Height - ScaleY(115);
  CLB_License.Left := Page.Surface.Width - ScaleX(322);
  CLB_License.AddGroup('GAMS license options:', '', 0, nil);
  CLB_License.AddRadioButton('No license, demo only', '', 1, True, True, nil);
  CLB_License.AddRadioButton('Copy license file', '', 1, False, True, nil);
  CLB_License.AddRadioButton('Copy license text from clipboard', '', 1, False, True, nil);
  CLB_License.ShowLines := False;
  CLB_License.WantTabs := True;
  CLB_License.OnClick := @SaveState;
  CLB_License.OnClickCheck := @CheckCB;
  CLB_License_Last_Checked := 1;

  ST_License := TNewStaticText.Create(Page);
  ST_License.Caption := 'clipboard has no GAMS license';
  ST_License.Font.Name := 'Courier New';
  ST_License.Font.Height :=  ScaleX(16);
  ST_License.Top := CLB_License.Top + CLB_License.Height;
  ST_License.Left := CLB_License.Left - ScaleX(8);
  ST_License.Parent := Page.Surface;
end;


function HandleLicenseOptions(): Boolean;
begin
  Result := True;

  {user wants to use a license from the clipboard}
  if CLB_License.Checked[3] then Result := WriteLicenseFile

  {user wants to use a license file}
  else if CLB_License.Checked[2] then Result := CopyLicenseFile;

  {else: user does not want to handle any license}
end;


{Some wizard pages will be skipped and the decision is made at runtime}
function ShouldSkip(Sender: TWizardPage): Boolean;
begin
  if (Sender.ID = wpAdvancedOptions) then
  begin
    // if advanced mode -> show the page
    if CB_Advanced.Checked then Result := False 
    else Result := True; 
  end;
  if (Sender.ID = wpSelectProgramGroup) then
  begin
    // if advanced mode -> show the page
    if CB_Advanced.Checked then Result := False 
    else Result := True; 
  end;
end;

{Create an option page for the davanced installation mode}
function CreateAdvancedOptionPage(): Integer;
var
  Page: TWizardPage;
begin
  Page := CreateCustomPage(wpSelectTasks, 'Advanced Options', 'Select advanced options');
  Page.OnShouldSkipPage := @ShouldSkip;
  
  CB_AllUsers := TNewCheckBox.Create(Page);
  CB_AllUsers.Height  := ScaleY(40);
  CB_AllUsers.Width   := Page.SurfaceWidth;
  CB_AllUsers.Top     := ScaleX(10);
  CB_AllUsers.Left    := ScaleY(10);
  if IsAdmin then
  begin
    CB_AllUsers.Caption := 'Install GAMS for all users';
    CB_AllUsers.Checked := True;
    CB_AllUsers.Parent  := Page.Surface;
  end;

  CB_Path := TNewCheckBox.Create(Page);
  CB_Path.Height  := ScaleY(40);
  CB_Path.Width   := Page.SurfaceWidth;
  CB_Path.Top     := CB_AllUsers.Top + CB_AllUsers.Height;
  CB_Path.Left    := ScaleY(10);
  CB_Path.Caption := 'Add GAMS directory to PATH environment variable';
  //Change the PATH environment variable automatically;
  CB_Path.Checked := False;
  CB_Path.Parent  := Page.Surface;
  
  CB_Shortcut := TNewCheckBox.Create(Page);
  CB_Shortcut.Height  := ScaleY(40);
  CB_Shortcut.Width   := Page.SurfaceWidth;
  CB_Shortcut.Top     := CB_Path.Top + CB_Path.Height;
  CB_Shortcut.Left    := ScaleY(10);
  CB_Shortcut.Caption := 'Create a desktop icon for GAMS IDE';
  CB_Shortcut.Checked := True;
  CB_Shortcut.Parent  := Page.Surface;

  CB_Shortcut_Studio := TNewCheckBox.Create(Page);
  CB_Shortcut_Studio.Height  := ScaleY(40);
  CB_Shortcut_Studio.Width   := Page.SurfaceWidth;
  CB_Shortcut_Studio.Top     := CB_Shortcut.Top + CB_Shortcut.Height;
  CB_Shortcut_Studio.Left    := ScaleY(10);
  CB_Shortcut_Studio.Caption := 'Create a desktop icon for GAMS Studio';
  CB_Shortcut_Studio.Checked := True;
  CB_Shortcut_Studio.Parent  := Page.Surface;
                                                          
  Result := Page.ID;
end;

{Create a page for choosing the language of GAMS MIRO}
function CreateMIROlanguagePage(): Integer;
var
  Page: TWizardPage;
begin
  Page := CreateCustomPage(wpSelectTasks, 'GAMS MIRO language', 'Choose the default language for GAMS MIRO');
  
  CLB_MIROLang := TNewCheckListBox.Create(Page);
  CLB_MIROLang.Flat := True;
  CLB_MIROLang.BorderStyle := bsNone;
  CLB_MIROLang.ParentColor := True;
  CLB_MIROLang.Parent := Page.Surface;
  CLB_MIROLang.Width := Page.SurfaceWidth;
  CLB_MIROLang.Height := ScaleY(100);
  
  CLB_MIROLang.AddGroup('Which default language should be chosen for GAMS MIRO? ' + #13#10 , '', 0, nil);
  CLB_MIROLang.AddRadioButton('English', '', 1, True, True, nil);
  CLB_MIROLang.AddRadioButton('German', '', 1, False, True, nil);
  CLB_MIROLang.AddRadioButton('Chinese', '', 1, False, True, nil);
  CLB_MIROLang.ShowLines := False;
  CLB_MIROLang.WantTabs := True;
                                                          
  Result := Page.ID;
end;

{called when a wizard page changes}
procedure CurPageChanged(CurPage: Integer);
var
    Hive: Integer;
    SubKey, PathStr: String;
    OldGamsDir: String;
begin
  if wpReady = CurPage then
  begin
                                  Wizardform.ReadyMemo.Lines.Add(#13#10 + 'Additional Tasks:');
    if CB_AllUsers.Checked and CB_Advanced.Checked then Wizardform.ReadyMemo.Lines.Add('    Install for all users');
    if CB_Path.Checked and CB_Advanced.Checked then Wizardform.ReadyMemo.Lines.Add('    Add GAMS directory to PATH environment variable');
    if (CB_Shortcut.Checked) or (not CB_Advanced.Checked) then Wizardform.ReadyMemo.Lines.Add('    Create a desktop icon for GAMS IDE');
    if (CB_Shortcut_Studio.Checked) or (not CB_Advanced.Checked) then Wizardform.ReadyMemo.Lines.Add('    Create a desktop icon for GAMS Studio');
    if (True) then Wizardform.ReadyMemo.Lines.Add('    Associate .gms files with GAMS Studio');
    if (CLB_MIROLang.Checked[1]) then Wizardform.ReadyMemo.Lines.Add('    Set default language for GAMS MIRO to English');
    if (CLB_MIROLang.Checked[2]) then Wizardform.ReadyMemo.Lines.Add('    Set default language for GAMS MIRO to German');
    if (CLB_MIROLang.Checked[3]) then Wizardform.ReadyMemo.Lines.Add('    Set default language for GAMS MIRO to Chinese');

    // show a warning, that a GAMSDIR from a previous installation exists but is not updated
    Hive := HKCU
    SubKey := 'Environment'
    if CB_AllUsers.Checked then
    begin
      Hive := HKLM
      SubKey := 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'
    end;
    if not CB_Path.Checked and RegValueExists(Hive, Subkey, 'GAMSDIR')
    then
    begin
      RegQueryStringValue(Hive, Subkey, 'GAMSDIR', OldGamsDir);
      if OldGamsDir <> ExpandConstant('{app}') + ';' + ExpandConstant('{app}') + '\gbin' then
      begin
        if not (WizardSilent()) then
          if MsgBox('A GAMSDIR environment variable is present from a previous installation.' +#13#10 + #13#10 + 'Do you want this environment variable to be updated?', mbInformation, MB_YESNO) = IDYES
            then CB_Path.Checked := True;
      end;
    end;
  end;

  if wpFinished = CurPage then
  begin
    checkCB(nil);    
    if CB_Path.Checked then UpdatePath(CB_AllUsers.Checked);
    
    // if user selected to create shortcut or default mode -> create shortcut
    if (CB_Shortcut.Checked) or (not CB_Advanced.Checked) then CreateShortcut();
    if (CB_Shortcut_Studio.Checked) or (not CB_Advanced.Checked) then CreateShortcutStudio();

    writeReg((CB_AllUsers.Checked) or (IsAdmin and (not CB_Advanced.Checked)));
  end;
end;

{called when a wizard page changes during uninstallation}
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
   Hive: Integer;
   IniString, Default, Str: String;
begin
   if usUninstall = CurUninstallStep
   then
   begin
      Default := ''
      //clean up registry
      IniString := GetIniString('registry', 'hive', Default, ExpandConstant('{#UnInstInfo}'))
      if      'HKCR' = IniString then Hive := HKCR
      else if 'HKCU' = IniString then Hive := HKCU
      
      //clean up registry only if the current registry was written by the uninstalling GAMS version
      RegQueryStringValue(Hive, 'gams.location', '', Str);
      if Str = ExpandConstant('{app}') then
      begin
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key1', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key2', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key3', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key4', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key5', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key6', Default, ExpandConstant('{#UnInstInfo}')));
         RegDeleteKeyIncludingSubkeys(Hive, GetIniString('registry', 'key7', Default, ExpandConstant('{#UnInstInfo}')));
      end;
      
      //delete shortcuts
      DeleteFile(GetIniString('file', 'shortcut', Default, ExpandConstant('{#UnInstInfo}')));
      DeleteFile(GetIniString('file', 'shortcut_studio', Default, ExpandConstant('{#UnInstInfo}')));
      //delete .uninstinfo.ini
      DeleteFile(ExpandConstant('{#UnInstInfo}'));
   end;
end;

{event function used to handle the license options on the finsihed page when the user clicks the "next" button}
function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID= wpFinished then Result := HandleLicenseOptions
  else Result := True;
end;

{initialize the wizard}                  
procedure InitializeWizard();
begin
  LicenseStr := '';
  
  if IsAdminLoggedOn() or IsPowerUserLoggedOn() then IsAdmin := True
  else IsAdmin := False

  wpAdvancedOptions := CreateAdvancedOptionPage;
  wpMIROLang := CreateMIROlanguagePage;
  PageFromID(wpSelectProgramGroup).OnShouldSkipPage := @ShouldSkip;
  ModifyWelcomePage();
  ModifyFinishedPage();                            
end;

[InnoIDE_Settings]
LogFileOverwrite=false
