/* PrismJS 1.29.0
https://prismjs.com/download.html#themes=prism&languages=diff+yaml&plugins=diff-highlight */
// RS (2025-02-07): removed core JS to only keep yaml and diff related JS */
!function (e) { e.languages.diff = { coord: [/^(?:\*{3}|-{3}|\+{3}).*$/m, /^@@.*@@$/m, /^\d.*$/m] }; var r = { "deleted-sign": "-", "deleted-arrow": "<", "inserted-sign": "+", "inserted-arrow": ">", unchanged: " ", diff: "!" }; Object.keys(r).forEach((function (n) { var a = r[n], i = []; /^\w+$/.test(n) || i.push(/\w+/.exec(n)[0]), "diff" === n && i.push("bold"), e.languages.diff[n] = { pattern: RegExp("^(?:[" + a + "].*(?:\r\n?|\n|(?![\\s\\S])))+", "m"), alias: i, inside: { line: { pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/, lookbehind: !0 }, prefix: { pattern: /[\s\S]/, alias: /\w+/.exec(n)[0] } } } })), Object.defineProperty(e.languages.diff, "PREFIXES", { value: r }) }(Prism), function (e) { var r = /[*&][^\s[\]{},]+/, n = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/, a = "(?:" + n.source + "(?:[ \t]+" + r.source + ")?|" + r.source + "(?:[ \t]+" + n.source + ")?)", i = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, (function () { return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source })), s = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source; function t(e, r) { r = (r || "").replace(/m/g, "") + "m"; var n = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, (function () { return a })).replace(/<<value>>/g, (function () { return e })); return RegExp(n, r) } e.languages.yaml = { scalar: { pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, (function () { return a }))), lookbehind: !0, alias: "string" }, comment: /#.*/, key: { pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, (function () { return a })).replace(/<<key>>/g, (function () { return "(?:" + i + "|" + s + ")" }))), lookbehind: !0, greedy: !0, alias: "atrule" }, directive: { pattern: /(^[ \t]*)%.+/m, lookbehind: !0, alias: "important" }, datetime: { pattern: t(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source), lookbehind: !0, alias: "number" }, boolean: { pattern: t(/false|true/.source, "i"), lookbehind: !0, alias: "important" }, null: { pattern: t(/null|~/.source, "i"), lookbehind: !0, alias: "important" }, string: { pattern: t(s), lookbehind: !0, greedy: !0 }, number: { pattern: t(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, "i"), lookbehind: !0 }, tag: n, important: r, punctuation: /---|[:[\]{}\-,|>?]|\.\.\./ }, e.languages.yml = e.languages.yaml }(Prism), function () { if ("undefined" != typeof Prism) { var e = /^diff-([\w-]+)/i, r = /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/g, n = RegExp(/(?:__|[^\r\n<])*(?:\r\n?|\n|(?:__|[^\r\n<])(?![^\r\n]))/.source.replace(/__/g, (function () { return r.source })), "gi"), a = !1; Prism.hooks.add("before-sanity-check", (function (r) { var n = r.language; e.test(n) && !r.grammar && (r.grammar = Prism.languages[n] = Prism.languages.diff) })), Prism.hooks.add("before-tokenize", (function (r) { a || Prism.languages.diff || Prism.plugins.autoloader || (a = !0, console.warn("Prism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism's Autoloader plugin.")); var n = r.language; e.test(n) && !Prism.languages[n] && (Prism.languages[n] = Prism.languages.diff) })), Prism.hooks.add("wrap", (function (a) { var i, s; if ("diff" !== a.language) { var t = e.exec(a.language); if (!t) return; i = t[1], s = Prism.languages[i] } var o = Prism.languages.diff && Prism.languages.diff.PREFIXES; if (o && a.type in o) { var u, f = a.content.replace(r, "").replace(/&lt;/g, "<").replace(/&amp;/g, "&"), d = f.replace(/(^|[\r\n])./g, "$1"); u = s ? Prism.highlight(d, s, i) : Prism.util.encode(d); var l, g = new Prism.Token("prefix", o[a.type], [/\w+/.exec(a.type)[0]]), c = Prism.Token.stringify(g, a.language), p = []; for (n.lastIndex = 0; l = n.exec(u);)p.push(c + l[0]); /(?:^|[\r\n]).$/.test(f) && p.push(c), a.content = p.join(""), s && a.classes.push("language-" + i) } })) } }();