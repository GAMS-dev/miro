/* PrismJS 1.29.0
https://prismjs.com/download.html#themes=prism&languages=diff&plugins=diff-highlight 
// RS (2025-02-07): removed core JS to only keep diff-related JS */
!function (e) { e.languages.diff = { coord: [/^(?:\*{3}|-{3}|\+{3}).*$/m, /^@@.*@@$/m, /^\d.*$/m] }; var i = { "deleted-sign": "-", "deleted-arrow": "<", "inserted-sign": "+", "inserted-arrow": ">", unchanged: " ", diff: "!" }; Object.keys(i).forEach((function (a) { var n = i[a], s = []; /^\w+$/.test(a) || s.push(/\w+/.exec(a)[0]), "diff" === a && s.push("bold"), e.languages.diff[a] = { pattern: RegExp("^(?:[" + n + "].*(?:\r\n?|\n|(?![\\s\\S])))+", "m"), alias: s, inside: { line: { pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/, lookbehind: !0 }, prefix: { pattern: /[\s\S]/, alias: /\w+/.exec(a)[0] } } } })), Object.defineProperty(e.languages.diff, "PREFIXES", { value: i }) }(Prism), function () { if ("undefined" != typeof Prism) { var e = /^diff-([\w-]+)/i, i = /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/g, a = RegExp(/(?:__|[^\r\n<])*(?:\r\n?|\n|(?:__|[^\r\n<])(?![^\r\n]))/.source.replace(/__/g, (function () { return i.source })), "gi"), n = !1; Prism.hooks.add("before-sanity-check", (function (i) { var a = i.language; e.test(a) && !i.grammar && (i.grammar = Prism.languages[a] = Prism.languages.diff) })), Prism.hooks.add("before-tokenize", (function (i) { n || Prism.languages.diff || Prism.plugins.autoloader || (n = !0, console.warn("Prism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism's Autoloader plugin.")); var a = i.language; e.test(a) && !Prism.languages[a] && (Prism.languages[a] = Prism.languages.diff) })), Prism.hooks.add("wrap", (function (n) { var s, r; if ("diff" !== n.language) { var g = e.exec(n.language); if (!g) return; s = g[1], r = Prism.languages[s] } var f = Prism.languages.diff && Prism.languages.diff.PREFIXES; if (f && n.type in f) { var t, u = n.content.replace(i, "").replace(/&lt;/g, "<").replace(/&amp;/g, "&"), l = u.replace(/(^|[\r\n])./g, "$1"); t = r ? Prism.highlight(l, r, s) : Prism.util.encode(l); var o, d = new Prism.Token("prefix", f[n.type], [/\w+/.exec(n.type)[0]]), c = Prism.Token.stringify(d, n.language), m = []; for (a.lastIndex = 0; o = a.exec(t);)m.push(c + o[0]); /(?:^|[\r\n]).$/.test(u) && m.push(c), n.content = m.join(""), r && n.classes.push("language-" + s) } })) } }();