Version = 5
LibraryName = GAMS Data Utilities
Columns = 6
1 = SeqNr
2 = Name
3 = File type
4 = Tool
5 = Windows Only
6 = Description
InitialSort = 1
*$*$*$
Files = SingleAsk.gms
1 = 001
2 = SingleAsk
3 = gms
4 = ask
5 = yes
6 = Single ask popup for entering an integer value

*$*$*$
Files = MultipleAsk.gms
1 = 002
2 = MultipleAsk
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering various data types

*$*$*$
Files = RadioButton.gms
1 = 003
2 = RadioButton
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering values through radio buttons

*$*$*$
Files = CheckListbox.gms
1 = 004
2 = CheckListbox
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering values through listboxes or checklistboxes

*$*$*$
Files = Combobox.gms,CityListSmall.inc,CityListMedium.inc,CityListLarge.inc
1 = 005
2 = Combobox
3 = gms, inc
4 = ask
5 = yes
6 = Multiple ask popups for entering values through comboboxes

*$*$*$
Files = Fileopenbox.gms,TrnsportSetDec.inc,TrnsportSetData.gdx,Trnsport.inc
1 = 006
2 = Fileopenbox
3 = gms, gdx, inc
4 = ask
5 = yes
6 = Ask popup for opening a file

*$*$*$
Files = Filesavebox.gms
1 = 007
2 = Filesavebox
3 = gms
4 = ask
5 = yes
6 = Ask popup for saving a file

*$*$*$
Files = GDXINExample1.gms,DemandData.gdx
1 = 008
2 = GDXINExample1
3 = gms, gdx
4 =
5 =
6 = Illustrates use of demand data from an external source in compile phase

*$*$*$
Files = GDXINExample2.gms,DemandData.gdx
1 = 009
2 = GDXINExample2
3 = gms, gdx
4 =
5 =
6 = Illustrates use of demand and market data from an external source in compile phase

*$*$*$
Files = GDXINExample3.gms,Trnsport.gdx
1 = 010
2 = GDXINExample3
3 = gms, gdx
4 =
5 =
6 = Lists all the symbols in Trnsport.gdx in the listing file in compile phase

*$*$*$
Files = Savepoint.gms,trnsport.gms
1 = 011
2 = Savepoint
3 = gms
4 =
5 =
6 = Saves solution to a log or GDX file

*$*$*$
Files = Loadpoint.gms,trnsport.gms,Transport_p1.gdx
1 = 012
2 = Loadpoint
3 = gms, gdx
4 =
5 =
6 = Illustrates use of "execute_loadpoint" command

*$*$*$
Files = CompTimeWriteTrnsportGDX.gms
1 = 013
2 = CompTimeWriteTrnsportGDX
3 = gms
4 =
5 =
6 = Writes data to GDX file during compile time

*$*$*$
Files = ExecTimeReadTrnsportGDX.gms,Trnsport.gdx
1 = 014
2 = ExecTimeReadTrnsportGDX
3 = gms, gdx
4 =
5 =
6 = Reads data from a GDX file during execution time

*$*$*$
Files = GDXExecute_unloadExample4.gms
1 = 015
2 = GDXExecute_unloadExample4
3 = gms
4 =
5 =
6 = Writes data to GDX file during execution time

*$*$*$
Files = GDXXRWExample5.gms,Test1.xls
1 = 016
2 = GDXXRWExample5
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Parameter from Spreadsheet

This model illustrates reading a table from an Excel spreadsheet with row and
column dimension of magnitude 1. In addition, reading the same data using a
named Excel range is demonstrated.

This model is referenced in "Reading Parameter from Spreadsheet" and "Reading
Parameter from Spreadsheet using pre-defined Excel Named Ranges" from the
GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample6.gms,Test1.xls
1 = 017
2 = GDXXRWExample6
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Parameter from Spreadsheet with Duplication

This program illustrates reading a table from an Excel
spreadsheet. It contains the same data as in GDXXRWExample5.gms
but organized differently. Unlike GDXXRWExample5.gms,
this example also reads set data. Additionally, this program
offers writing and reading GDXXRW command options from a file.

This model is referenced in "Reading Parameter from Spreadsheet with
Duplication" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample7.gms,Test1.xls
1 = 018
2 = GDXXRWExample7
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Multi-dimensional Parameter from Spreadsheet

This program illustrates reading a four dimensional parameter from spreadsheet.

This model is referenced in "Reading Multi-dimensional Parameter from
Spreadsheet" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample8.gms,exampleData.xlsx
1 = 019
2 = GDXXRWExample8
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Special Values from Spreadsheet and writing to Spreadsheet

This model illustrates reading and writing a parameter with
special values such as Eps, +Inf, -Inf, Na, Undf, booleans etc.

This model is referenced in "Reading Special Values from Spreadsheet and writing
to Spreadsheet" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample9.gms,exampleData.xlsx
1 = 020
2 = GDXXRWExample9
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Set Elements associated with Data or Text using the values Option

This program illustrates reading a set from an Excel
spreadsheet using 'values' option.

This model is referenced in "Reading Set Elements associated with Data or Text
using the values Option" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample10.gms,exampleData.xlsx
1 = 021
2 = GDXXRWExample10
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Spreadsheet using the index Option

This program illustrates reading a number of parameters and
sets using the index option. The index data is primarily a list
of set and parameter ranges, their dimensions and some additional options.

This model is referenced in "Reading Spreadsheet using the Index Option" from
the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample11a.gms,Makedata.gms
1 = 022
2 = GDXXRWExample11a
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing Sets and Parameter to Spreadsheet at Compile Time

This program illustrates writing to an MS Excel file at compile time.
At first, a set is defined and written to spreadsheet while demonstrating the
values option. Afterwards, a parameter is generated and written to spreadsheet, too.

*$*$*$
Files = GDXXRWExample11b.gms
1 = 023
2 = GDXXRWExample11b
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing Sets and Parameter to Spreadsheet at Execution Time

This program illustrates writing to an MS Excel file at execution time.
At first, a set is defined and written to spreadsheet while demonstrating the
values option. Afterwards, a parameter is generated and written to spreadsheet, too.

This model is referenced in "Writing Set to Spreadsheet" and "Writing Parameter
to Spreadsheet" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample12.gms,exampleData.xlsx
1 = 024
2 = GDXXRWExample12
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing to Spreadsheet using the merge and clear Option

This program illustrates the use of merge and clear option when writing to a
spreadsheet range with matching row and column labels already stored within
the spreadsheet.

This model is referenced in "Writing to Spreadsheet with merge Option" resp.
"Writing to Spreadsheet with clear Option" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample13.gms,Test1.xls
1 = 025
2 = GDXXRWExample13
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a Table from Spreadsheet, manipulates the Data and writes back to Spreadsheet

This program reads data from an MS Excel file, modifies
it, writes to an GDX file and then finally writes the
modifies data to a new sheet in the MS Excel file.

This model is referenced in "Reads a table from Spreadsheet, manipulates the
Data and writes back to Spreadsheet" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample14.gms,TrnsportData.xls
1 = 026
2 = GDXXRWExample14
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Data from Spreadsheet and writing Data to Spreadsheet after Solve

This example illustrates:
. Compilation phase
. Read data from a spreadsheet and create a GDX file
. Reading sets from the GDX file
. Using the sets as a domain for additional declarations
. Reading additional data elements
. Execution phase
. Solving the model trnsport
. Write solution to a GDX file
. Use GDX file to update spreadsheet

This model is referenced in "Reading Data from Spreadsheet and writing Data to
Spreadsheet after Solve" from the GDXXRW Documentation.

*$*$*$
Files = GDXDUMPExample15.gms,trnsport.gms
1 = 027
2 = GDXDUMPExample15
3 = gms
4 = gdxdump
5 =
6 = Generates first a GDX file and then lists symbols in the GDX file

*$*$*$
Files = GDXDIFFExample16.gms,trnsport.gms
1 = 028
2 = GDXDIFFExample16
3 = gms
4 = gdxdiff
5 =
6 = Compares two GDX files and writes the difference to a third GDX file

This program compares the data of symbols with the same name, type and
dimension in two GDX files and writes the differences to a third GDX
file based on the data of the trnsport model using GDXDIFF. The differences
are loaded and displayed in the listings file afterwards.

This model is referenced in "Compares two GDX files and writes the difference
to a third GDX file" from the GDXDIFF Documentation.

*$*$*$
Files = GDXMERGEExample17.gms
1 = 029
2 = GDXMERGEExample17
3 = gms
4 = gdxmerge
5 =
6 = Merges a number of GDX files into one

*$*$*$
Files = GDXRANKExample18.gms
1 = 030
2 = GDXRANKExample18
3 = gms
4 = gdxrank
5 =
6 = Sorts a parameter, creates a sorted version and verifies that the sort works correctly

*$*$*$
Files = GDXCOPYExample19.gms,UNStatistics.gdx
1 = 031
2 = GDXCOPYExample19
3 = gms, gdx
4 = gdxcopy
5 =
6 = Copies a GDX file to a compressed format for version 6
It creates a new directory called "newdir" in the project directory
   and places the new copy there.

*$*$*$
Files = Distances1.gms,Sample.mdb
1 = 032
2 = Distances1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Single-valued tables
The programs selects distances from database "sample.mdb"
  and writes them to "distances.inc" or "distances.gdx" or both.

*$*$*$
Files = SalesProfitDB1.gms,Sample.mdb
1 = 033
2 = SalesProfitDB1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Single-valued tables
The programs selects sales and profit information from database "sample.mdb"
  and writes them to "sales.inc" or "profit.inc" respectively.

*$*$*$
Files = SalesProfitDB2c.gms,Sample.mdb
1 = 034
2 = SalesProfitDB2c
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using 'UNION' and writes results to "salesprofit.inc". It also illustrates
  how to break a line in a query statement.

*$*$*$
Files = SalesProfitDB2m.gms,Sample.mdb
1 = 035
2 = SalesProfitDB2m
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using 'UNION' and writes results to "salesprofitm.inc". It also illustrates the
  use of 'M' (mute) option to remove extra information about the query from the
  standard output and generated include file.

*$*$*$
Files = SalesProfitDB3.gms,Sample.mdb
1 = 036
2 = SalesProfitDB3
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into several '.inc' files.

*$*$*$
Files = SalesProfitDB4.gms,Sample.mdb
1 = 037
2 = SalesProfitDB4
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into a single GDX file.

*$*$*$
Files = IndexMapping1.gms,Sample.mdb
1 = 038
2 = IndexMapping1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Index mapping in GAMS code
This example shows how to map index names if the names in the
   database are different from the ones in the GAMS model.

*$*$*$
Files = IndexMapping2.gms,Sample.mdb
1 = 039
2 = IndexMapping2
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Index mapping in MS Access
This example shows how to map index names if the names in the database
   are different from the ones in the GAMS model. In this case all
   mapping is handled inside the database.

*$*$*$
Files = MDB2GMS.gms
1 = 040
2 = MDB2GMS
3 = gms
4 = mdb2gms
5 = yes
6 = Runs MDB2GMS interactively
It offers the user first a menu of options, which
   includes "mdb2gms" help, "mdb2gms" PDF documentation
   and running "mdb2gms" interactively.

*$*$*$
Files = MDBSr5.gms,MDBSr0.gms,Sr1.gms,Sr2.gms,Sr3.gms,Sr4.gms,Transportation.mdb
1 = 041
2 = MDBSr5
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Sequence of GAMS models using save/restart facility
This program calls a number of GAMS programs. Each program performs one task in the given sequence:
   Data extraction --> Data manipulation --> Model definition --> Model solution --> Report writing
*$*$*$
Files = MDB2GDX1.gms,MDBSr0.gms,Transportation.mdb
1 = 042
2 = MDB2GDX1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Creates a GDX file in execution time and displays it in GDXVIEWER

*$*$*$
Files = MDB2GDX2.gms,Transportation.mdb
1 = 043
2 = MDB2GDX2
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Creates a GDX file in compile time

*$*$*$
Files = DBTimestamp1.gms,MDBSr0.gms,Transportation.mdb
1 = 044
2 = DBTimestamp1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Retrieve data from database once each day
Day of month in "dbtimestamp.inc" is compared with current day and if they are
   different, data are selected and "dbtimestamp.inc" is updated with current date.
   Note that if "dbtimestamp.inc" does not exist, it is created with day of month
   equaling to "0" to ensure data selection.

*$*$*$
Files = Wiring.gms,Sample.mdb
1 = 045
2 = Wiring
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of wiring option to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using wiring option and writes results to "x.inc".

*$*$*$
Files = PopulateV.gms
1 = 046
2 = PopulateV
3 = gms
4 = mdb2gms
5 = yes
6 = Creates MS Access database

*$*$*$
Files = Distances2.gms,Sample.mdb
1 = 047
2 = Distances2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Single-valued tables
The programs selects distances from database "sample.mdb"
  and writes them to "distances.inc" or "distances.gdx" or both.

*$*$*$
Files = SalesProfitDB5.gms,Sample.mdb
1 = 048
2 = SalesProfitDB5
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb" using
   'UNION' and writes results to "salesprofit.inc". Alternative connection strings
   are also provided as comment.

*$*$*$
Files = SalesProfitDB6.gms,Sample.mdb
1 = 049
2 = SalesProfitDB6
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into several ".inc" files. Alternative connection strings
   are also provided as comment.

*$*$*$
Files = SalesProfitDB7.gms,Sample.mdb
1 = 050
2 = SalesProfitDB7
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into a single GDX file. Alternative connection strings
   are also provided as comment.

*$*$*$
Files = IndexMapping3.gms,Sample.mdb
1 = 051
2 = IndexMapping3
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Index mapping in GAMS code
This example shows how to map index names if the names in the
   database are different from the ones in the GAMS model.

*$*$*$
Files = IndexMapping4.gms,Sample.mdb
1 = 052
2 = IndexMapping4
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Index mapping in MS Access
This example shows how to map index names if the names in the database
   are different from the ones in the GAMS model. In this case all
   mapping is handled inside the database.

*$*$*$
Files = SQL2GMS.gms
1 = 053
2 = SQL2GMS
3 = gms
4 = sql2gms
5 = yes
6 = Runs SQL2GMS interactively
It offers the user first a menu of options, which
   includes "sql2gms" help, "sql2gms" PDF documentation
   and running "sql2gms" interactively.

*$*$*$
Files = SQLSr5.gms,SQLSr0.gms,Sr1.gms,Sr2.gms,Sr3.gms,Sr4.gms,Transportation.mdb
1 = 054
2 = SQLSr5
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Sequence of GAMS models using save/restart facility
This program calls a number of GAMS programs. Each program performs one task in the given sequence:
   Data extraction --> Data manipulation --> Model definition --> Model solution --> Report writing
*$*$*$
Files = SQL2GDX1.gms,SQLSr0.gms,Transportation.mdb
1 = 055
2 = SQL2GDX1
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Creates a GDX file in execution time and displays it in GDXVIEWER

*$*$*$
Files = SQL2GDX2.gms,Transportation.mdb
1 = 056
2 = SQL2GDX2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Creates a GDX file in compile time

*$*$*$
Files = DBTimestamp2.gms,SQLSr0.gms,Transportation.mdb
1 = 057
2 = DBTimestamp2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Retrieves data from database once each day
Day of month in "dbtimestamp.inc" is compared with current day and if they are
   different, data are selected and "dbtimestamp.inc" is updated with current date.
   Note that if "dbtimestamp.inc" does not exist, it is created with day of month
   equaling to "0" to ensure data selection.

*$*$*$
Files = Excel.gms,Profit.xls
1 = 058
2 = Excel
3 = gms, xls
4 = sql2gms
5 = yes
6 = Reads data from Excel through ODBC
The spreadsheet is accessed via ODBC (DSN-less connection).

*$*$*$
Files = Text.gms,ODBCData.txt,ODBCData2.txt,Schema.ini
1 = 059
2 = Text
3 = gms, txt, ini
4 = sql2gms
5 = yes
6 = Reads table from a text file using the ODBC Text Driver

*$*$*$
Files = dBASE.gms,Table02.dbf
1 = 060
2 = dBASE
3 = gms, dbf
4 = sql2gms
5 = yes
6 = Reads a dBASE table from United Nations Statistics Division

*$*$*$
Files = SQLServer.gms
1 = 061
2 = SQLServer
3 = gms
4 = sql2gms
5 = yes
6 = Test timeouts against SQL Server
This model artificially delays a query against SQL Server.
   It will only work if the command time out is set to a number
   exceeding 10 minutes.

*$*$*$
Files = ReadSet.gms,Test3.xls
1 = 062
2 = ReadSet
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data

*$*$*$
Files = ReadTrnsportData1.gms,Test3.xls
1 = 063
2 = ReadTrnsportData1
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data and the table of the transportation model in several calls

*$*$*$
Files = ReadTrnsportData2.gms,Test3.xls
1 = 064
2 = ReadTrnsportData2
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data and the table of the transportation model in one call

*$*$*$
Files = ReadMultiDimPar.gms,Yield.xls
1 = 065
2 = ReadMultiDimPar
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads a multidimensional parameter

*$*$*$
Files = ReadMultiRange.gms,UNESCO.xls
1 = 066
2 = ReadMultiRange
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads a multi-area range and does post processing to eliminate invalid entries

*$*$*$
Files = GDXViewerExample.gms,Trnsport.gdx
1 = 067
2 = GDXViewerExample
3 = gms, gdx
4 = GDXViewer
5 = yes
6 = Illustrates conversion of GDX data into different formats
GDXViewer allows the user to convert GDX data into several formats:
   MS Excel, CSV, ASCII text, GAMS Include, HTML, XML, MS Access and
   other database formats. In the interactive mode, it can also generate
   SQL insert and update scripts.

*$*$*$
Files = Portfolio.gms,portfolio.xls
1 = 068
2 = Portfolio
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Determines an efficient frontier in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Sudoku.gms,sudoku.xls
1 = 069
2 = Sudoku
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Sudoku in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Samurai.gms,samurai.xls
1 = 070
2 = Samurai
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Samurai Sudoku in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Samurai2.gms,samurai2.xls
1 = 071
2 = Samurai2
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Samurai Sudoku in Excel, using the GDX and GAMSX DLL (vba API)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba.

*$*$*$
Files = CHP.gms,chp.xls
1 = 072
2 = CHP
3 = gms, xls
4 = gdxxrw, Excel, vba API
5 = yes
6 = Optimize combined heat and power generation in Excel, using vba API (gamsx and opt) and GDXXRW
In this example GAMS runs only in the background. We use gdxxrw to write a GDX
   file from data defined in the spreadsheet. With the vba version of the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into a
   user defined workbook using gdxxrw again.

*$*$*$
Files = CHP2.gms,chp2.xls
1 = 073
2 = CHP2
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Optimize combined heat and power generation in Excel, using vba API (gamsx, opt and gdx)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into the
   workbook using the GDX vba API again.

*$*$*$
Files = transxls.gms,transport.xls
1 = 074
2 = transxls
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve classical transportation problem in Excel, using vba API (gamsx, opt and gdx)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into the
   workbook using the GDX vba API again.

*$*$*$
Files = tsvngdx.gms
1 = 075
2 = tsvngdx
3 = gms
4 = TortoiseSVN, GDX
5 = yes
6 = Integrate gdxdiff with TortoiseSVN
This gams program helps to integrate gdxdiff with TortoiseSVN. Two modes are implemented.

--mode=bin (default)
 Calls gdxdiff and shows resulting difffile as well as the log in the GAMS IDE

--mode=text
 Uses gdxdump to write out the correspoding text files and uses the diff utility
 specified by the user. In this case it is WinMerge

In order to integrate this with TortoiseSVN do the following
- open TortoiseSVN's Settings
- go to DiffViewer
- choose Advanced
- choose Add
- Enter extension .gdx
- Enter external program (replace with your GAMS System Directory):
"C:\Program Files\GAMS23.4\gams" "C:\Program Files\GAMS23.4\gamslib_ml\tsvngdx.351" --mine=%mine --base=%base --mode=bin

NOTE: So far this only works on Windows since it depends upon Windows programs.

Contributor: Jan-H. Jagla, February 2010

*$*$*$
Files = GDXXRWExample15.gms
1 = 076
2 = GDXXRWExample15
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing to Spreadsheet using a Filter

The following example creates a small GDX file which is used to write
the symbol A to a spreadsheet with the filter enabled.

This model is referenced in "Writing Spreadsheet using a Filter" from
the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample16.gms
1 = 077
2 = GDXXRWExample16
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing to Spreadsheet adding Text and Hyperlinks

The following example illustrates the use of the Text directive.

First we write some data to a gdx file and we use text directive to write
text to various cells; some of the cells are hyperlinks to other locations.

This model is referenced in "Writing to Spreadsheet adding Text and Hyperlinks"
from the GDXXRW Documentation.

*$*$*$
Files = tompivot.gms
1 = 078
2 = tompivot
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Little GAMS Program from Tom Rutherford that Illustrates Report Generation with Excel
Tom Rutherford supplied a little GAMS program that facilitates movement of data to EXCEL Pivot Tables

There are a few GAMS programming "tricks" which facilitate the transformation of
GAMS model outputs into Excel pivot tables.

These include:
- The $echov statement as a means of generating "batinclude subroutines".
- The $macro statement as a means of improving compactness and precision
  of GAMS code for computing model reports.
- The DOS FOR statement with command extensions for transferring model
  output to all Excel files in a folder.

*$*$*$
Files = readdata.gms,stocks.inc,stocks.xls,stocks.mdb,stocks.csv
1 = 079
2 = readdata
3 = gms, inc, xls, mdb, csv
4 = gdxxrw, mdb2gms, csv2gms
5 = yes
6 = Read data from .inc, .xls, .mdb and .csv file
This model reads data from different sources. With...
--datainput=GAMS an GAMS include file is used
--datainput=EXCEL an Excel file is read using gdxxrw
--datainput=ACCESS an Access file is read using mdb2gms
--datainput=CSV an CSV file is read using csv2gms

Contributor: Michael Bussieck

*$*$*$
Files = datatest.gms
1 = 080
2 = datatest
3 = gms
4 =
5 =
6 = Driver for datalib tests of all sorts

Contributor: Timo Lohmann

*$*$*$
Files = GDXMRWPlotting01.gms, do_plot.m, simple.gms, do_ehl.m, seepress.m, ehl_kost.gms, plotngon.m, ngon.gms
1 = 081
2 = GDXMRWPlotting01
3 = gms, m
4 = gdxmrw
5 =
6 = GDXMRW examples for plotting

Contributor: Steve Dirkse, Aug 2011

*$*$*$
Files = TrnsxcllStarter.gms,Trnsxcll.xls,Trnsxcll.gms
1 = 083
2 = TrnsxcllStarter
3 = gms, xls
4 =
5 = yes
6 = Excel Spreadsheet in Charge of GAMS

The worksheet writes the files included below named:
            supply.set
            demand.set
            supply.dat
            demand.dat
            distance.dat
            tran.dat
This code sends back solution in output.csv

Contributor: Bruce McCarl, March 2012

*$*$*$
Files = SpawnGAMSExcel.gms,SpawnGAMS.xls,trnsport.gms
1 = 084
2 = SpawnGAMSExcel
3 = gms, xls
4 = Excel
5 = yes
6 = Spawn an arbitrary GAMS model from Excel

This example shows 3 different ways to specify the GAMS System Directory via VBA:
     1) By using the windows registry
     2) By using the "gamside.ini" file that is created when the GAMSIDE is opened
     3) Manually
Notes
     The GAMS model can contain several solve statements.
     The solution is obtained via the VBA code activation of  "trace" command line parameter
     The VBA modules can be exported and used in other programs
     If the Excel Workbook is shared, then GDXXRW can be used to write the solution into the same Workbook

Developed with Visual Basic for Applications 7.0, 3/8/2013.

Contributor: Toni Lastusilta

*$*$*$
Files = csv2gdx1.gms
1 = 085
2 = csv2gdx1
3 = gms, csv
4 = csv2gdx, gdxdump
5 =
6 = Test gdxdump and csv2gdx

*$*$*$
Files = GDXMRWShowJac1.gms,trnsport.gms
1 = 086
2 = GDXMRWShowJac1
3 = gms, m
4 = gdxmrw
5 =
6 = Visualize model Jacobian in Matlab

*$*$*$
Files = SpawnGAMSAccess.gms,SpawnGAMS.accdb
1 = 087
2 = SpawnGAMSAccess
3 = gms, accdb
4 = Access
5 = yes
6 = Spawn GAMS from Access

This example demonstrates how to integrate GAMS into a Microsoft Office Access
2010 application. Both the GAMS model and input data is in Access. When the
model is solved a temporary file ".gms" is created, which may be convenient
to edit during GAMS model development. The GAMS execution process can be
viewed, interrupted and stopped from Access. The model data is transferred
to GAMS using the GAMS GDX VBA API to create a GAMS Data Exchange (GDX) file.
After GAMS has solved the model the result is transferred into Access via a
comma-separated values (CSV) file.

Developed with Visual Basic for Applications 7.0.1628, 10/31/2013.

Contributor: Toni Lastusilta

*$*$*$
Files = triobal.gms,triobal.xlsm
1 = 088
2 = triobal
3 = gms, xlsm
4 = Excel
5 = yes
6 = Tommasino-Rao Input Output Balance Software

The program objective is to estimate the Italian intersectorial table for the
year 2000 starting from the 1995 table by using the RAS method.
Generate input produce three files: technical coefficients, monetary flows and
production vector to update the base-year matrix; these files can be generated
also by clicking the corresponding buttons (coe, flows, p-vec).
Import and elaborate results generate the output of the GAMS procedure to
compare the estimated matrix with the known 2000 matrix: the comparison is
allocated in the "Output" sheet. Some statistics are generated and available in
the sheet "Statistics".

Contributor: Maria Cristina Tommasino, Marco Rao

*$*$*$
Files = invert1.gms,invert1.r
1 = 089
2 = invert1
3 = gms, r
4 = gdxrrw
5 =
6 = Matrix inversion via R

Example use of R to duplicate the functionality of the GAMS invert
utility.  Obviously, you can extend this to do all sorts of things
that R supports, e.g. determinants, singular values, condition number,
etc.  If getting started with data interchange between GAMS and R is a
roadblock for you, this example should help you push through.

Contributor: Steve

*$*$*$
Files = invert2.gms,invert2.m
1 = 090
2 = invert2
3 = gms, m
4 = gdxmrw
5 =
6 = Matrix inversion via Matlab

Example use of Matlab to duplicate the functionality of the GAMS
invert utility.  Obviously, you can extend this to do all sorts of
things that Matlab supports, e.g. determinants, singular values,
condition number, etc.  If getting started with data interchange
between GAMS and Matlab is a roadblock for you, this example should
help you push through.

Contributor: Steve

*$*$*$
Files = gdxmrw_qp1_starter.gms,gdxmrw_qp1.gms,gdxmrw_qp1_run.m
1 = 091
2 = gdxmrw_qp1_starter
3 = gms, m
4 = gdxmrw
5 =
6 = Portfolio Analysis with Matlab and GAMS

In this example we use a QP to analyze a portfolio selection problem.
The QP model is essentially taken from QALAN in the GAMS model library.
The data starts in Matlab and is dumped to a standard (i.e. non-indexed)
GDX file.  This data drives the QP model below.  The results are
dumped to a second standard GDX file, read back in to Matlab, and used
to generate a plot of the efficient frontier.

Contributor: Steve

*$*$*$
Files = gdxmrw_qp2_starter.gms,gdxmrw_qp2.gms,gdxmrw_qp2_run.m
1 = 092
2 = gdxmrw_qp2_starter
3 = gms, m
4 = gdxmrw
5 =
6 = Portfolio Analysis with Matlab and GAMS

This example is nearly identical to gdxmrw_qp1.  However, instead of
using standard/generic GDX files, we use indexed GDX.  This can make
the data interface a little cleaner.

Contributor: Steve

*$*$*$
Files = gdxmrw_tr1.gms,gdxmrw_tr1_run.m,trdata.m
1 = 093
2 = gdxmrw_tr1
3 = gms, m
4 = gdxmrw
5 =
6 = Transport LP with non-indexed GDX data interface

We solve the transport model in GAMS.  Data input and output are both done
using standard (i.e. non-indexed) GDX files.  In this example, the input
for this model was created in Matlab and the output will go back to
Matlab, but the format of the GDX files is not specific to Matlab at
all.

Contributor: Steve

*$*$*$
Files = gdxmrw_tr2.gms,gdxmrw_tr2_run.m,trdata.m
1 = 094
2 = gdxmrw_tr2
3 = gms, m
4 = gdxmrw
5 =
6 = Transport LP with indexed GDX data interface

We solve the transport model in GAMS.  Data input and output are both done
using indexed GDX files.

Contributor: Steve

*$*$*$
Files = gdxmrw_qp3.gms,qp_model.gms,gamsqp.m,gamsqp_driver.m
1 = 095
2 = gdxmrw_qp3
3 = gms, m
4 = gdxmrw
5 =
6 = QP solver M-file using GAMS and GDXMRW

In this example we implement a QP solver using a Matlab M-file, GAMS,
and GDXMRW.  The call is very similar to the QP routines
from Mathworks and the QP vendors.

Contributor: Jagdish

*$*$*$
Files = gdxxrw_autoopen.gms,mytest.xlsm
1 = 096
2 = gdxxrw_autoopen
3 = gms, xlsm
4 = gdxxrw
5 =
6 = Tests that gdxxrw calls the auto_open macro facility

The macro auto_open of mytest.xlsm opens the file myvalue.txt and populates
the cell A2 with the value found in the file. Another subroutine doubles the
value of A2 and stroes the result into B2.

Contributor: M. Bussieck, October 2014

*$*$*$
Files = gdxmrw_qp4.gms, do_qp.m, qp.gms
1 = 097
2 = gdxmrw_qp4
3 = gms, m
4 = gdxmrw
5 =
6 =  Calling GAMS model from Matlab 

Contributor: Steve Dirkse, Dec 2014

*$*$*$
Files = gdxmrw_intro01_init.gms
1 = 098
2 = gdxmrw_intro01_init
3 = gms
4 = gdxmrw
5 =
6 = Introduction to data transfer between Matlab and GAMS

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_intro02_init.gms
1 = 099
2 = gdxmrw_intro02_init
3 = gms
4 = gdxmrw
5 =
6 = Introduction to calling GAMS from Matlab

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_irgdx01_init.gms
1 = 100
2 = gdxmrw_irgdx01_init
3 = gms
4 = gdxmrw
5 =
6 = Reading data from a indexed GDX file with IRGDX

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_iwgdx01_init.gms
1 = 101
2 = gdxmrw_iwgdx01_init
3 = gms
4 = gdxmrw
5 =
6 = Writing data into a indexed GDX file with IWGDX

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_rgdx01_init.gms
1 = 102
2 = gdxmrw_rgdx01_init
3 = gms
4 = gdxmrw
5 =
6 = Reading data from a GDX file into a structure with RGDX

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_wgdx01_init.gms
1 = 103
2 = gdxmrw_wgdx01_init
3 = gms
4 = gdxmrw
5 =
6 = Writing structured data into a GDX file with WGDX

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_ext01_init.gms
1 = 104
2 = gdxmrw_ext01_init
3 = gms
4 = gdxmrw
5 =
6 = Extended use of GDXMRW

Contributor: Toni Lastusilta, Dec 2014

*$*$*$
Files = gdxmrw_tr3.gms,tr3_run.m,tr3_mod.gms,trdata.m
1 = 105
2 = gdxmrw_tr3
3 = gms, m
4 = gdxmrw
5 =
6 = canonical form LP created in Matlab and solved via gams() Mex-function

The matrices (A,b,c) defining the LP are created in Matlab and the LP
is solved the deprecated Mex-function gams().  The LP data are passed
in, and the solution passed out, via the Mex-interface.

Contributor: Steve Dirkse, Dec 2014

*$*$*$
Files = gdxmrw_tr4.gms,tr4_run.m,tr45_mod.gms,trdata.m
1 = 106
2 = gdxmrw_tr4
3 = gms, m
4 = gdxmrw
5 =
6 = better example of gams() usage

An LP model is processed in the recommended way:
  1. Write data (sets and parameters) from Matlab to GDX
  2. Solve a generic GAMS model with little or no data exchanged via
     the Mex-function gams()
  3. Read the solution from GDX to Matlab

Contributor: Steve Dirkse, Dec 2014

*$*$*$
Files = gdxmrw_tr5.gms,tr5_run.m,tr45_mod.gms,trdata.m
1 = 107
2 = gdxmrw_tr5
3 = gms, m
4 = gdxmrw
5 =
6 = better example of gams() usage

An LP model is processed in the recommended way:
  1. Write data (sets and parameters) from Matlab to GDX
  2. Solve a generic GAMS model with little or no data exchanged via
     the Mex-function gams()
  3. Read the solution from GDX to Matlab

Contributor: Steve Dirkse, Dec 2014

*$*$*$
Files = embeddedSort.gms
1 = 108
2 = embeddedSort
3 = gms
4 = embedded code
5 =
6 = Sorting of numerical data using the embedded code facility

The embedded code facility allows to integrate external code (e.g. Python) during
both compile and execution time of a GAMS program. GAMS symbols are shared with
the external code, so no communication via disk is necessary.

This example demonstrates how to sort random numerical GAMS data in Python at
GAMS execution time.

Contributor: Lutz Westermann, July 2017

*$*$*$
Files = embeddedSplit.gms
1 = 109
2 = embeddedSplit
3 = gms
4 = embedded code
5 =
6 = Splitting of labels using the embedded code facility

The embedded code facility allows to integrate external code (e.g. Python) during
both compile and execution time of a GAMS program. GAMS symbols are shared with
the external code, so no communication via disk is necessary.

This example demonstrates how to split GAMS labels in Python GAMS compilation
time to generate new set elements.

Contributor: Lutz Westermann, July 2017

*$*$*$
Files = embeddedMultiInstance.gms
1 = 110
2 = embeddedMultiInstance
3 = gms
4 = embedded code
5 =
6 = Handling multiple instances of the embedded code facility at once

The embedded code facility allows to integrate external code (e.g. Python) during
both compile and execution time of a GAMS program. GAMS symbols are shared with
the external code, so no communication via disk is necessary.

This example demonstrates that multiple instances of the embedded code facility
can be used in parallel without disturbing each other.

Contributor: Lutz Westermann, July 2017

*$*$*$
Files = csv2gdx2.gms
1 = 111
2 = csv2gdx2
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 2 - Reading CSV Files with CSV2GDX

This problem finds a least cost shipping schedule that meets
requirements at markets and supplies at factories.

CSV2GDX is used to read all data from external CSV files
with comma separated fields.
Note: In this example, the CSV data can also be read by using a simple
table statement without doing further preprocessing.

This model is referenced in "Getting Started Example 1 - Reading
CSV files with CSV2GDX" from the CSV2GDX Documentation.

Dantzig, G B, Chapter 3.3. In Linear Programming and Extensions.
Princeton University Press, Princeton, New Jersey, 1963.

This formulation is described in detail in:
Rosenthal, R E, Chapter 2: A GAMS Tutorial. In GAMS: A User's Guide.
The Scientific Press, Redwood City, California, 1988.

The line numbers will not match those in the book because of these
comments.

Keywords: linear programming, transportation problem, scheduling,
          CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx3.gms
1 = 112
2 = csv2gdx3
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 3 - Reading Semicolon separated Data

This model demonstrates how to read CSV files with semicolon separated data
and comma separated decimals. Afterwards, the valueDim option is presented.

This model is referenced in "Getting Started Example 2 - Reading semicolon separated data"
from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx4.gms
1 = 113
2 = csv2gdx4
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 4 - Dealing with missing Labels and Duplicates

This model demonstrates how to use the CSV2GDX tool on data with missing labels,
i.e. the autoCol and autoRow option is used to process the data.
The file EUCData.csv contains the extracted euclidian coordinates of the first
nine cities of berlin52.tsp from TSPLib.
You might want to import the data to calculate a complete distance matrix
inside GAMS to find an optimal traveling salesman tour for instance.

This model is referenced in "Getting Started Example 3 - Dealing with missing
labels and duplicates" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features, traveling salesman problem

*$*$*$
Files = csv2gdx5.gms
1 = 114
2 = csv2gdx5
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 5 - Reading more than one Parameter from a single Input File

This model demonstrates how to read more than one parameter from in single CSV
file. However, this cannot be done with CSV2GDX directly, since CSV2GDX returns
one single parameter. The data must be split later on.

This model is referenced in "Getting Started Example 4 - Reading more than one
parameter from a single input file" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx6.gms, GDPData.csv
1 = 115
2 = csv2gdx6
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 6 - Reading economic Data from the World Bank Data Catalog

The CSV2GDX tool is used to read GDP growth rate data from the World Bank Data Catalog.
To get an idea about the data, please have a look at the reference below.

This model is referenced in "Getting Started Example 5 - Reading economic data
from the World Bank Data Catalog" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx7.gms
1 = 116
2 = csv2gdx7
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 7 - Reading special Values with CSV2GDX

This model demonstrates how various special values are intepreted when
reading a CSV file with CSV2GDX.

This model is referenced in "Additional examples for extended use Example 6 -
Reading special values" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx8.gms
1 = 117
2 = csv2gdx8
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 8 - Reading an compressed encrypted Input File

This model demonstrates how to read a compressed input file with an optional
password using CSV2GDX. The gzip program in the gbin sub-directory can be used
to compress and decompress a file, while Endecrypt compresses and encrypts an
input file.

Note: CSV2GDX can only read compressed and encrypted files, if they are
      compressed AND encrypted with Endecrypt!

This model is referenced in "Additional examples for extended use Example 7 -
Reading an compressed encrypted input file" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = csv2gdx9.gms
1 = 118
2 = csv2gdx9
3 = gms, csv
4 = csv2gdx
5 =
6 = CSV2GDX Example 9 - Reading Options from an external File

This example demonstrates how to read the parameters from an external text file.
The file distance.csv from will be processed with CSV2GDX while reading the
options from an external file named howToRead.txt.

This model is referenced in "Additional examples for extended use Example 8 -
Reading the options from an external file" from the CSV2GDX Documentation.

Keywords: CSV2GDX, data exchange, GAMS language features

*$*$*$
Files = GDXXRWExample17.gms, exampleData.xlsx
1 = 119
2 = GDXXRWExample17
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading several Scalars from Spreadsheet

This example demonstrates how to read several scalars (i.e. scalar names and
their associated values) for your model from a spreadsheet file, without declaring
and reading every single scalar manually. However, we assume that the scalars
are stored in a listed format (see file exampleData.xlsx sheet indus89Scalars).
All scalar names and their associated values are read as a single parameter over
the domain set consisting of all scalar names first. Afterwards, we use the
Put Writing Facility to write a file 'scalars.gms', containing all scalar
statements in the following form:

   Scalar Scalarname1     /      Scalarvalue1 /;
   Scalar Scalarname2     /      Scalarvalue2 /;
   ...

Finally, 'scalars.gms' is included to the model.


This model is referenced in "Reading several Scalars from Spreadsheet"
from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample18.gms, exampleData.xlsx
1 = 120
2 = GDXXRWExample18
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading Sets from Spreadsheet

This program illustrates reading set elements from spreadsheet, including
reading explanatory text and reading set elements from lists with duplications.

This model is referenced in "Reading Set from Spreadsheet", "Reading Set and
Explanatory Text", "Reading Set from Data Tables" and "Reading Set from Lists
with Duplication" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample19.gms
1 = 121
2 = GDXXRWExample19
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Writing Parameter to Spreadsheet including Zero Values

This model demonstrates two approaches for writing zero values of a parameter
to spreadsheet using GDXXRW. The first approach uses the epsOut option to write
zero's to spreadsheet, after all zero values within the parameter have been
stored as EPS, while the second approach regarding variables will exploit the
squeeze option to write zeros of the .l subfield to spreadsheet.

This model is referenced in "Writing Parameter to Spreadsheet including Zero
Values" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample20.gms, exampleData.xlsx
1 = 122
2 = GDXXRWExample20
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reading empty Cells with colMerge and reading merged Excel Ranges with cMerge

This model demonstrates the usage of the colMerge parameter when reading empty
cells in the first part and the handling of merged Excel Ranges when reading
with cMerge in the second part.

This model is referenced in "Reading empty Cells with colMerge" resp. "Reading
merged Excel Ranges with cMerge" from the GDXXRW Documentation.

*$*$*$
Files = GDXXRWExample21.gms, exampleData.xlsx
1 = 123
2 = GDXXRWExample21
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Skipping empty Rows or Columns and Ignoring Rows or Columns

At first, the skipEmpty parameter is used to skip empty rows or columns when
reading data while using the top left corner range specification. Afterwards,
the ignoreRows resp. ignoreColumns parameter is demonstrated.

This model is referenced in "Skipping Empty Rows and Columns" resp. "Ignoring
Rows and Columns" from the GDXXRW Documentation.

*$*$*$
Files = GDXDUMPExample1.gms,trnsport.gms
1 = 124
2 = GDXDUMPExample1
3 = gms, csv
4 = gdxdump
5 =
6 = GDXDUMP - Adding double Quotes to an user defined Header when writing to CSV

This model demonstrates a workaround on how to add double qoutes to an user defined
header when writing data from GDX to CSV using GDXDump. Note that the header
option cannot be used to add the double qoutes!

This model is referenced in "Adding double Quotes to an user defined Header
when writing to CSV" from the GDXDUMP Documentation.

*$*$*$
Files = pickstock.gms,dowjones2016.csv,pickstock_conf.zip,mkconfig.inc
1 = 125
2 = pickstock
3 = gms, inc
4 = miro
5 = 
6 = Stock selection problem with MIRO


*$*$*$
Files = pickstock_live.gms,pickstock_live_conf.zip,mkconfig.inc
1 = 126
2 = pickstock_live
3 = gms, inc
4 = miro
5 = 
6 = Stock selection problem with live data with MIRO

*$*$*$
Files = transport.gms,transport_conf.zip,mkconfig.inc
1 = 127
2 = transport
3 = gms, inc
4 = miro
5 = 
6 = Classical transportation problem with MIRO

*$*$*$
Files = transport_live.gms,transport_live_conf.zip,mkconfig.inc
1 = 128
2 = transport_live
3 = gms, inc
4 = miro
5 = 
6 = Classical transportation problem with live data with MIRO

*$*$*$
Files = kport.gms,kport_conf.zip,mkconfig.inc
1 = 129
2 = kport
3 = gms, inc
4 = miro
5 = 
6 = Product Portfolio Optimization with MIRO
*$*$*$
