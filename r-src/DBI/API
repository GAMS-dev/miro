# API for DBI package

## Exported functions

ANSI()
Id(...)
SQL(x, ..., names = NULL)
SQLKeywords(dbObj, ...)
dbAppendTable(conn, name, value, ..., row.names = NULL)
dbBegin(conn, ...)
dbBind(res, params, ...)
dbBreak()
dbCallProc(conn, ...)
dbCanConnect(drv, ...)
dbClearResult(res, ...)
dbColumnInfo(res, ...)
dbCommit(conn, ...)
dbConnect(drv, ...)
dbCreateTable(conn, name, fields, ..., row.names = NULL, temporary = FALSE)
dbDataType(dbObj, obj, ...)
dbDisconnect(conn, ...)
dbDriver(drvName, ...)
dbExecute(conn, statement, ...)
dbExistsTable(conn, name, ...)
dbFetch(res, n = -1, ...)
dbGetDBIVersion()
dbGetException(conn, ...)
dbGetInfo(dbObj, ...)
dbGetQuery(conn, statement, ...)
dbGetRowCount(res, ...)
dbGetRowsAffected(res, ...)
dbGetStatement(res, ...)
dbHasCompleted(res, ...)
dbIsReadOnly(dbObj, ...)
dbIsValid(dbObj, ...)
dbListConnections(drv, ...)
dbListFields(conn, name, ...)
dbListObjects(conn, prefix = NULL, ...)
dbListResults(conn, ...)
dbListTables(conn, ...)
dbQuoteIdentifier(conn, x, ...)
dbQuoteLiteral(conn, x, ...)
dbQuoteString(conn, x, ...)
dbReadTable(conn, name, ...)
dbRemoveTable(conn, name, ...)
dbRollback(conn, ...)
dbSendQuery(conn, statement, ...)
dbSendStatement(conn, statement, ...)
dbSetDataMappings(res, flds, ...)
dbUnloadDriver(drv, ...)
dbUnquoteIdentifier(conn, x, ...)
dbWithTransaction(conn, code, ...)
dbWriteTable(conn, name, value, ...)
fetch(res, n = -1, ...)
isSQLKeyword(dbObj, name, keywords = .SQL92Keywords, case = c("lower", "upper", "any")[3], ...)
isSQLKeyword.default(name, keywords = .SQL92Keywords, case = c("lower", "upper", "any")[3])
make.db.names(dbObj, snames, keywords = .SQL92Keywords, unique = TRUE, allow.keywords = TRUE, ...)
make.db.names.default(snames, keywords = .SQL92Keywords, unique = TRUE, allow.keywords = TRUE)
sqlAppendTable(con, table, values, row.names = NA, ...)
sqlAppendTableTemplate(con, table, values, row.names = NA, prefix = "?", ..., pattern)
sqlColumnToRownames(df, row.names = NA)
sqlCommentSpec(start, end, endRequired)
sqlCreateTable(con, table, fields, row.names = NA, temporary = FALSE, ...)
sqlData(con, value, row.names = NA, ...)
sqlInterpolate(conn, sql, ..., .dots = list())
sqlParseVariables(conn, sql, ...)
sqlParseVariablesImpl(sql, quotes, comments)
sqlQuoteSpec(start, end, escape, doubleEscape = TRUE)
sqlRownamesToColumn(df, row.names = NA)

## Foreign S3 methods

[.SQL(x, ...)
[[.SQL(x, ...)
toString.Id(x, ...)

## Exported data

.SQL92Keywords: character (character[220])
.__C__DBIConnection: classRepresentation (S4[1])
.__C__DBIDriver: classRepresentation (S4[1])
.__C__DBIObject: classRepresentation (S4[1])
.__C__DBIResult: classRepresentation (S4[1])
.__C__SQL: classRepresentation (S4[1])
.__T__SQLKeywords:DBI: environment (environment[2])
.__T__dbAppendTable:DBI: environment (environment[1])
.__T__dbBegin:DBI: environment (environment[0])
.__T__dbBind:DBI: environment (environment[0])
.__T__dbCallProc:DBI: environment (environment[0])
.__T__dbCanConnect:DBI: environment (environment[1])
.__T__dbClearResult:DBI: environment (environment[0])
.__T__dbColumnInfo:DBI: environment (environment[0])
.__T__dbCommit:DBI: environment (environment[0])
.__T__dbConnect:DBI: environment (environment[0])
.__T__dbCreateTable:DBI: environment (environment[1])
.__T__dbDataType:DBI: environment (environment[1])
.__T__dbDisconnect:DBI: environment (environment[0])
.__T__dbDriver:DBI: environment (environment[1])
.__T__dbExecute:DBI: environment (environment[1])
.__T__dbExistsTable:DBI: environment (environment[1])
.__T__dbFetch:DBI: environment (environment[1])
.__T__dbGetException:DBI: environment (environment[0])
.__T__dbGetInfo:DBI: environment (environment[1])
.__T__dbGetQuery:DBI: environment (environment[1])
.__T__dbGetRowCount:DBI: environment (environment[0])
.__T__dbGetRowsAffected:DBI: environment (environment[0])
.__T__dbGetStatement:DBI: environment (environment[0])
.__T__dbHasCompleted:DBI: environment (environment[0])
.__T__dbIsReadOnly:DBI: environment (environment[1])
.__T__dbIsValid:DBI: environment (environment[0])
.__T__dbListConnections:DBI: environment (environment[0])
.__T__dbListFields:DBI: environment (environment[2])
.__T__dbListObjects:DBI: environment (environment[1])
.__T__dbListResults:DBI: environment (environment[0])
.__T__dbListTables:DBI: environment (environment[0])
.__T__dbQuoteIdentifier:DBI: environment (environment[4])
.__T__dbQuoteLiteral:DBI: environment (environment[1])
.__T__dbQuoteString:DBI: environment (environment[3])
.__T__dbReadTable:DBI: environment (environment[2])
.__T__dbRemoveTable:DBI: environment (environment[1])
.__T__dbRollback:DBI: environment (environment[0])
.__T__dbSendQuery:DBI: environment (environment[0])
.__T__dbSendStatement:DBI: environment (environment[1])
.__T__dbSetDataMappings:DBI: environment (environment[0])
.__T__dbUnloadDriver:DBI: environment (environment[0])
.__T__dbUnquoteIdentifier:DBI: environment (environment[1])
.__T__dbWithTransaction:DBI: environment (environment[1])
.__T__dbWriteTable:DBI: environment (environment[1])
.__T__fetch:DBI: environment (environment[0])
.__T__isSQLKeyword:DBI: environment (environment[1])
.__T__make.db.names:DBI: environment (environment[1])
.__T__show:methods: environment (environment[6])
.__T__sqlAppendTable:DBI: environment (environment[1])
.__T__sqlCreateTable:DBI: environment (environment[1])
.__T__sqlData:DBI: environment (environment[1])
.__T__sqlInterpolate:DBI: environment (environment[1])
.__T__sqlParseVariables:DBI: environment (environment[1])

## Reexported objects

::show
